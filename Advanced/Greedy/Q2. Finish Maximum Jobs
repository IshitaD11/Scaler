/* Q2. Finish Maximum Jobs

Problem Description
There are N jobs to be done, but you can do only one job at a time.

Given an array A denoting the start time of the jobs and an array B denoting the finish time of the jobs.

Your aim is to select jobs in such a way so that you can finish the maximum number of jobs.

Return the maximum number of jobs you can finish.



Problem Constraints
1 <= N <= 105

1 <= A[i] < B[i] <= 109



Input Format
The first argument is an integer array A of size N, denoting the start time of the jobs.
The second argument is an integer array B of size N, denoting the finish time of the jobs.



Output Format
Return an integer denoting the maximum number of jobs you can finish.



Example Input
Input 1:

 A = [1, 5, 7, 1]
 B = [7, 8, 8, 8]
Input 2:

 A = [3, 2, 6]
 B = [9, 8, 9]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 We can finish the job in the period of time: (1, 7) and (7, 8).
Explanation 2:

 Since all three jobs collide with each other. We can do only 1 job. */

//sort array Pair by end time, then start time. Greedyly select the minimum end time. 
// If next start time is < current end time, can not do that task. Consider those tasks where start time>current end time.
// TC:O(nlogn) SC:O(n)

public class Solution {
    class Pair{
        int start;
        int end;
        Pair(int st,int en)
        {
            start=st;
            end=en;
        }
    }
    public int solve(ArrayList<Integer> A, ArrayList<Integer> B) {
        ArrayList<Pair> pairList = new ArrayList<>();
        int n=A.size();
        for(int i=0;i<n;i++)
        {
            Pair p=new Pair(A.get(i),B.get(i));
            pairList.add(p);
        }
        Collections.sort(pairList,new Comparator<Pair>(){
            @Override
            public int compare(Pair a,Pair b)
            {
                if(a.end==b.end)
                    return a.start-b.start;
                else
                    return a.end-b.end;
            }
        });

        int cnt=0;
        int currEnd=Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++)
        {
            if(pairList.get(i).start>=currEnd)
            {
                cnt++;
                currEnd=pairList.get(i).end;
            }
        }
        return cnt;
    }
}
