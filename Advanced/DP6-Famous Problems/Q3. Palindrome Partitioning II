/* Q3. Palindrome Partitioning II

Problem Description
Given a string A, partition A such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of A.



Problem Constraints
1 <= length(A) <= 501



Input Format
The first and the only argument contains the string A.



Output Format
Return an integer, representing the minimum cuts needed.



Example Input
Input 1:

 A = "aba"
Input 2:

 A = "aab"


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 "aba" is already a palindrome, so no cuts are needed.
Explanation 2:

 Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut. */

public class Solution {
    public int minCut(String A) {
        int len=A.length();
        int[][] dp = new int[len][len];
        for(int i=0;i<len;i++)
            Arrays.fill(dp[i],-1);
        return minCuts(A,0,len-1,dp);
    }

    public int minCuts(String A,int si,int ei,int[][] dp)
    {
        if(dp[si][ei]!=-1)
            return dp[si][ei];
            
        if(isPalindrome(A,si,ei))
        {
            dp[si][ei]=0;
        }
        else
        {
            int min=Integer.MAX_VALUE;
            for(int i=si;i<ei;i++)
            {
                if(isPalindrome(A,si,i))
                {
                    min = Math.min(min,minCuts(A,i+1,ei,dp));
                }
            }
            dp[si][ei]=min+1;
        }
        return dp[si][ei];
    }
    public boolean isPalindrome(String A,int si,int ei)
    {
        while(si<=ei)
        {
            if(A.charAt(si)!=A.charAt(ei))
                return false;
            si++;
            ei--;                
        }
        return true;
    }
}
