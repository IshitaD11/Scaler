/* Q1. ZigZag Level Order Traversal BT

Problem Description
Given a binary tree, return the zigzag level order traversal of its nodes values. (ie, from left to right, then right to left for the next level and alternate between).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return a 2D integer array denoting the zigzag level order traversal of the given binary tree.



Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [
   [3],
   [20, 9],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [2, 6]
   [3]
 ]


Example Explanation
Explanation 1:

 Return the 2D array. Each row denotes the zigzag traversal of each level. */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode A) {
        /*ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(A);
        int level=0;
        while(q.size()>0)
        {
            ArrayList<Integer> eachLvl = new ArrayList<>();
            int size=q.size();
            for(int i=1;i<=size;i++)
            {
                TreeNode curr = q.poll();
                eachLvl.add(curr.val);
                if(curr.left!=null)
                    q.add(curr.left);
                if(curr.right!=null)
                    q.add(curr.right);
            }
            if(level%2==0)
                ans.add(eachLvl);
            else
            {
                Collections.reverse(eachLvl);
                ans.add(eachLvl);
            }    
            level++;
        }
        return ans;*/

        // using two stacks to store odd and even levels
        // stack will push the first elements to be poped at the last, so we get zigzag pattern
        // for odd level we first go left then right node
        // for even level we first go right then left, so that the values can be in correct order

        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        Stack<TreeNode> oddLvlQ = new Stack<>();
        Stack<TreeNode> evenLvlQ =  new Stack<>();
        oddLvlQ.push(A);

        while(!oddLvlQ.isEmpty() || !evenLvlQ.isEmpty())
        {
            ArrayList<Integer> levelList = new ArrayList<>();
            if(!oddLvlQ.isEmpty())
            {
                while(!oddLvlQ.isEmpty()) //pop from oddLvl and push in evenLvl
                {
                    TreeNode odd = oddLvlQ.pop();
                    levelList.add(odd.val);
                    if(odd.left!=null)
                        evenLvlQ.push(odd.left);
                    if(odd.right!=null)
                        evenLvlQ.push(odd.right);
                }
                ans.add(levelList);
            }
            
            levelList = new ArrayList<>();
            if(!evenLvlQ.isEmpty())
            {
                while(!evenLvlQ.isEmpty()) //pop from evenLvl and push in oddLvl, right first then left
                {
                    TreeNode even = evenLvlQ.pop();
                    levelList.add(even.val);
                    if(even.right!=null)
                        oddLvlQ.push(even.right);
                    if(even.left!=null)
                        oddLvlQ.push(even.left);
                }
                ans.add(levelList);
            }
        }
        return ans;
    }
}
