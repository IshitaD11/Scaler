/* Q2. Vertical Order traversal

Problem Description
Given a binary tree, return a 2-D array with vertical order traversal of it. Go through the example and image for more details.


NOTE: If 2 Tree Nodes shares the same vertical level then the one with lesser depth will come first.



Problem Constraints
0 <= number of nodes <= 105



Input Format
First and only arument is a pointer to the root node of binary tree, A.



Output Format
Return a 2D array denoting the vertical order traversal of tree as shown.



Example Input
Input 1:

      6
    /   \
   3     7
  / \     \
 2   5     9
Input 2:

      1
    /   \
   3     7
  /       \
 2         9


Example Output
Output 1:

 [
    [2],
    [3],
    [6, 5],
    [7],
    [9]
 ]
Output 2:

 [
    [2],
    [3],
    [1],
    [7],
    [9]
 ]


Example Explanation
Explanation 1:

 First row represent the verical line 1 and so on. */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
//  hashmap --> <position,node val arrayList>
// queue --> Pair(node,position) --> left position = currpos-1 --> right position = currpos+1
public class Solution {
    public class Pair{
        TreeNode node;
        int pos;
        Pair(TreeNode nn,int position){
            node=nn;
            pos=position;
        }
    }
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) {
        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();
        Queue<Pair> que = new LinkedList<>();
        Pair root = new Pair(A,0);
        int minPos=0;
        int maxPos=0;
        que.add(root);
        while(que.size()>0)
        {
            Pair curr = que.poll();
            minPos=Math.min(minPos,curr.pos);
            maxPos=Math.max(maxPos,curr.pos);
            if(!map.containsKey(curr.pos))
            {
                ArrayList<Integer> list = new ArrayList<Integer>();
                list.add(curr.node.val);
                map.put(curr.pos,list);
            }
            else
                map.get(curr.pos).add(curr.node.val);

            // go left and right nodes
            if(curr.node.left!=null)
                que.add(new Pair(curr.node.left,curr.pos-1));
            if(curr.node.right!=null)
                que.add(new Pair(curr.node.right,curr.pos+1));
        }
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        for(int i=minPos;i<=maxPos;i++)
        {
            ans.add(map.get(i));
        }
        return ans;
    }
}
