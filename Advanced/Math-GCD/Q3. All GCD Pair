/* Q3. All GCD Pair

Problem Description
Given an array of integers A of size N containing GCD of every possible pair of elements of another array.

Find and return the original numbers used to calculate the GCD array in any order. For example, if original numbers are {2, 8, 10} then the given array will be {2, 2, 2, 2, 8, 2, 2, 2, 10}.



Problem Constraints
1 <= N <= 10000

1 <= A[i] <= 109



Input Format
The first and only argument given is the integer array A.



Output Format
Find and return the original numbers which are used to calculate the GCD array in any order.



Example Input
Input 1:

 A = [2, 2, 2, 2, 8, 2, 2, 2, 10]
Input 2:

 A = [5, 5, 5, 15]


Example Output
Output 1:

 [2, 8, 10]
Output 2:

 [5, 15]


Example Explanation
Explanation 1:

 Initially, array A = [2, 2, 2, 2, 8, 2, 2, 2, 10].
 2 is the gcd between 2 and 8, 2 and 10.
 8 and 10 are the gcds pair with itself.
 Therefore, [2, 8, 10] is the original array.
Explanation 2:

 Initially, array A = [5, 5, 5, 15].
 5 is the gcd between 5 and 15.
 15 is the gcds pair with itself.
 Therefore, [5, 15] is the original array. */
 
 /* elements : {2,8,10} ==> 
GCD array ==> all possible pairs  | 2  8  10
                                2 | 2  2  2
                                8 | 2  8  2
                                10| 2  2  10
                                
So the diagonals are the elements of actual array 
Keep an hashmap to store the GCD pairs, which are of different elements
If the current element is not present in hashMap, means that is element of the oroginal array
If present in hashMap, reduce count to track the GCDs*/


public class Solution {
    public int[] solve(int[] A) {
        // sort the GCD array
        Arrays.sort(A);
        
        int n=(int)Math.sqrt(A.length);
        int[] actualArray = new int[n];

        HashMap<Integer,Integer> gcdMap = new HashMap<>();
        // the maximum element is always the actual element 
        int idx=0;

        // iterate over the other elements, compare with hashMap and add to original array
        for(int i=A.length-1;i>=0;i--)
        {
            if(gcdMap.containsKey(A[i]) && gcdMap.get(A[i])>0)
            {
                gcdMap.put(A[i],gcdMap.get(A[i])-1);
            }
            else
            {
                actualArray[idx]=A[i];
                idx++;
                for(int j=0;j<actualArray.length;j++)
                {
                    if(actualArray[j]!=0)
                    {
                        int gcd = gcd(actualArray[j],A[i]);
                        gcdMap.put(gcd,gcdMap.getOrDefault(gcd,0)+2);
                    }
                }
            }
        }
        return actualArray;
    }
    public int gcd(int A,int B)
    {
        if(B==0)
            return A;
        return gcd(B,A%B);
    }
}
