/* Q3. Median of Array

Problem Description
There are two sorted arrays A and B of sizes N and M respectively.

Find the median of the two sorted arrays ( The median of the array formed by merging both the arrays ).

NOTE:

The overall run time complexity should be O(log(m+n)).
IF the number of elements in the merged array is even, then the median is the average of (n/2)th and (n/2+1)th element. For example, if the array is [1 2 3 4], the median is (2 + 3) / 2.0 = 2.5.


Problem Constraints
1 <= N + M <= 2*106



Input Format
The first argument is an integer array A of size N.
The second argument is an integer array B of size M.



Output Format
Return a decimal value denoting the median of two sorted arrays.



Example Input
Input 1:

 A = [1, 4, 5]
 B = [2, 3]
Input 2:

 A = [1, 2, 3]
 B = [4]


Example Output
Output 1:

 3.0
Output 2:

 2.5


Example Explanation
Explanation 1:

 The median of both the sorted arrays will be 3.0.
Explanation 2:

 The median of both the sorted arrays will be (2+3)/2 = 2.5. */

/* Binary search on how many elements to be picked from a list.
Total elements=length(a+b). elements at left or right total/2. 
search space : take 0 elements to min(total/2,length of A)
*/
public class Solution {
	// DO NOT MODIFY BOTH THE LISTS
	public double findMedianSortedArrays(final List<Integer> a, final List<Integer> b) {
		int lenA=a.size();
		int lenB=b.size();
		int eachSideLength = (lenA+lenB+1)/2;  //+1 to handle odd length, extrac element will be always at left
		int start = 0;
		int end = lenA;  //maximum we can select all elements from A
		while(start<=end)
		{
			int cutA = start + (end-start)/2; //no of elements. to find element of 0 idxed array: arr[cutA-1]
			int cutB= eachSideLength-cutA;
			if(cutB<0) //already selected more elememts from a, than the eachSideLength, need to reduce selection
			{
				end=cutA-1;
			}
			else if(cutB>lenB) 
			{
				start=cutA+1;
			}
			else
			{
				int leftA = (cutA <= 0) ? Integer.MIN_VALUE : a.get(cutA-1);
				int leftB = (cutB <= 0) ? Integer.MIN_VALUE : b.get(cutB-1);
				int rightA = (cutA>=lenA) ? Integer.MAX_VALUE : a.get(cutA);
				int rightB=(cutB>=lenB) ? Integer.MAX_VALUE : b.get(cutB);

				if(leftA<=rightB && leftB<=rightA)
				{
					if((lenA+lenB)%2==0)
					{
						double ans = (double)(Math.min(rightB,rightA) + Math.max(leftA,leftB))/2;
						return ans;
					}	
					else
						return Math.max(leftA,leftB);
				}
				else if(leftA>rightB)
					end=cutA-1;
				else
					start=cutA+1;
			}
		}
		return 0;
	}
}
