/* Q2. Palindrome List

Problem Description
Given a singly linked list A, determine if it's a palindrome. Return 1 or 0, denoting if it's a palindrome or not, respectively.



Problem Constraints
1 <= |A| <= 105



Input Format
The first and the only argument of input contains a pointer to the head of the given linked list.



Output Format
Return 0, if the linked list is not a palindrome.

Return 1, if the linked list is a palindrome.



Example Input
Input 1:

A = [1, 2, 2, 1]
Input 2:

A = [1, 3, 2]


Example Output
Output 1:

 1 
Output 2:

 0 


Example Explanation
Explanation 1:

 The first linked list is a palindrome as [1, 2, 2, 1] is equal to its reversed form.
Explanation 2:

 The second linked list is not a palindrom as [1, 3, 2] is not equal to [2, 3, 1]. */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public int lPalin(ListNode A) {
        // get the length of LinkedList to find mid
        ListNode temp = A;
        int size = 0;
        while(temp!=null)
        {
            size++;
            temp=temp.next;
        }
        if(size==0)
            return 0;
        int mid = size/2;

        // go to mid and reverse the right half
        temp = A;
        for(int i=0;i<mid;i++)
            temp=temp.next;

        // reverse the right half
        ListNode prev=temp;
        ListNode curr=temp.next;
        ListNode next = null;

        while(curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        // compare left and right LL value
        ListNode left = A;
        ListNode right = prev;
        for(int i=0;i<mid;i++)
        {
            if(left.val!=right.val)
                return 0;
            left=left.next;
            right=right.next;
        }
        return 1;
    }
}
