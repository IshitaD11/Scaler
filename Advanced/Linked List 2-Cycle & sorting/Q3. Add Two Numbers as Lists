/* Q3. Add Two Numbers as Lists

Problem Description
You are given two linked lists, A and B, representing two non-negative numbers.

The digits are stored in reverse order, and each of their nodes contains a single digit.

Add the two numbers and return it as a linked list.



Problem Constraints
1 <= |A|, |B| <= 105



Input Format
The first argument of input contains a pointer to the head of linked list A.

The second argument of input contains a pointer to the head of linked list B.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Input 1:

 
 A = [2, 4, 3]
 B = [5, 6, 4]
Input 2:

 
 A = [9, 9]
 B = [1]


Example Output
Output 1:

 
 [7, 0, 8]
Output 2:

 
 [0, 0, 1]


Example Explanation
Explanation 1:

 A = 342 and B = 465. A + B = 807. 
Explanation 2:

 A = 99 and B = 1. A + B = 100.  */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
//  sum each node at a time and have carry to store the overflow. Create new node, store the sum in new node, and create links
// create a dummy node to easily get node.next, ans head would be newHead.next
public class Solution {
    public ListNode addTwoNumbers(ListNode A, ListNode B) {

        int carry=0;
        ListNode newHead=new ListNode(0);
        ListNode node = newHead;

        while(A!=null || B!=null || carry!=0)
        {
            int sum =0;
            if(A!=null)
            {
                sum+=A.val;
                A=A.next;
            }

            if(B!=null)
            {
                sum+=B.val;
                B=B.next;
            }

            sum+=carry;
            int rem=sum%10;
            carry=sum/10;

            ListNode nn = new ListNode(rem);
            node.next=nn;
            node=node.next;
        }
        // end the LL with null
        node.next=null;
        return newHead.next;
    }
}
