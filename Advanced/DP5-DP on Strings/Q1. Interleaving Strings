/* Q1. Interleaving Strings

Problem Description
Given A, B, C find whether C is formed by the interleaving of A and B.



Problem Constraints
1 <= length(A), length(B) <= 100

1 <= length(C) <= 200



Input Format
The first argument of input contains a string, A.
The second argument of input contains a string, B.
The third argument of input contains a string, C.



Output Format
Return 1 if string C is formed by interleaving of A and B else 0.



Example Input
Input 1:

 A = "aabcc"
 B = "dbbca"
 C = "aadbbcbcac"
Input 2:

 A = "aabcc"
 B = "dbbca"
 C = "aadbbbaccc"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 "aa" (from A) + "dbbc" (from B) + "bc" (from A) + "a" (from B) + "c" (from A)
Explanation 2:

 It is not possible to get C by interleaving A and B. */

/* Easy solution is checking each char of C with A and B, whereever they matches, so 3 indexes we need to work with
for DP solution DP[i][j] = is C[0 to i+j-1] interleaving String considering A[0 to i-1] and B[0 to j-1] 
at position DP[i][j] if C[i+j-1] matches with A[i-1] then, check if till A[i-2] it is interleaving or not, if not, then it will be false
for DP[i][j] is A[i-2] is interleaving or not can be checked from DP[i-1][j]
Similarly if C[i+j-1] matches with B[j-1] then check till B[j-2] it was interleaving from DP[i][j-1]

TC:O(n*m) SC:O(n*m)
*/

public class Solution {
    public int isInterleave(String A, String B, String C) {
        int lenA=A.length();
        int lenB=B.length();
        
        if(C.length()!=lenA+lenB)
            return 0;

        int[][] dp = new int[lenA+1][lenB+1];

        for(int i=0;i<=lenA;i++)
        {
            for(int j=0;j<=lenB;j++)
            {
                if(i==0 && j==0)
                    dp[i][j]=1;

                else if(i==0 && B.charAt(j-1)==C.charAt(i+j-1))
                    dp[i][j]=dp[i][j-1];

                else if(j==0 && A.charAt(i-1)==C.charAt(i+j-1))
                    dp[i][j]=dp[i-1][j];

                else if(i>0 && j>0 && A.charAt(i-1)==C.charAt(i+j-1) && B.charAt(j-1)!=C.charAt(i+j-1))
                    dp[i][j]=dp[i-1][j];

                else if(i>0 && j>0 && A.charAt(i-1)!=C.charAt(i+j-1) && B.charAt(j-1)==C.charAt(i+j-1))
                    dp[i][j]=dp[i][j-1];

                else if(i>0 && j>0 && A.charAt(i-1)==C.charAt(i+j-1) && B.charAt(j-1)==C.charAt(i+j-1))
                {
                    if(dp[i][j-1]==1 || dp[i-1][j]==1)
                        dp[i][j]=1;
                }
                
            }
        }
        return dp[lenA][lenB];
    }
}
