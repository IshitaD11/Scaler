/* Q2. Wave Array

Problem Description
Given an array of integers A, sort the array into a wave-like array and return it.
In other words, arrange the elements into a sequence such that

a1 >= a2 <= a3 >= a4 <= a5..... 
NOTE: If multiple answers are possible, return the lexicographically smallest one.



Problem Constraints
1 <= len(A) <= 106
1 <= A[i] <= 106



Input Format
The first argument is an integer array A.



Output Format
Return an array arranged in the sequence as described.



Example Input
Input 1:

A = [1, 2, 3, 4]
Input 2:

A = [1, 2]


Example Output
Output 1:

[2, 1, 4, 3]
Output 2:

[2, 1]


Example Explanation
Explanation 1:

One possible answer : [2, 1, 4, 3]
Another possible answer : [4, 1, 3, 2]
First answer is lexicographically smallest. So, return [2, 1, 4, 3].
Explanation 1:

Only possible answer is [2, 1]. */

public class Solution {
    public int[] wave(int[] A) {
        // sort the array then swap A[i] & A[i+1], swap each subsequent pair
        // using quick Sort
        quickSort(A,0,A.length-1);

        // swap every subsequent pair
        int startIdx=0;
        while(startIdx+1<A.length)
        {
            swap(A,startIdx,(startIdx+1));
            startIdx=startIdx+2;
        }
        return A;
    }
    public void quickSort(int[] arr,int start,int end)
    {
        if(start>=end)
            return;
        
        int pivotIdx = partition(arr,start,end);
        quickSort(arr,start,pivotIdx-1);
        quickSort(arr,pivotIdx+1,end);
    }

    public int partition(int[] arr,int start, int end)
    {
        // take end idx element as pivot index
        int pivot = arr[end];
        int stIdx=start;
        for(int i=start;i<end;i++)
        {
            if(arr[i]<pivot)
            {
                swap(arr,i,stIdx);
                stIdx++;
            }
        }
        swap(arr,stIdx,end);
        return stIdx;
    }
    public void swap(int[] arr,int idx1,int idx2)
    {
        int temp = arr[idx1];
        arr[idx1]=arr[idx2];
        arr[idx2]=temp;
    }
}
