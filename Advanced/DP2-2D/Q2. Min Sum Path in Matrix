/* Q2. Min Sum Path in Matrix

Problem Description
Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.



Problem Constraints
1 <= M, N <= 2000

-1000 <= A[i][j] <= 1000



Input Format
First and only argument is a 2-D grid A.



Output Format
Return an integer denoting the minimum sum of the path.



Example Input
Input 1:

 A = [
       [1, 3, 2]
       [4, 3, 1]
       [5, 6, 1]
     ]
Input 2:

 A = [
       [1, -3, 2]
       [2, 5, 10]
       [5, -5, 1]
     ]


Example Output
Output 1:

 8
Output 2:

 -1


Example Explanation
Explanation 1:

 The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:

 The path will be: 1 -> -3 -> 5 -> -5 -> 1. */

// get the min from up and left cell, and dp[i][j]=a[i][j]+min(up,left)
// for saving space we will change in A itself
// TC:O(n*m) sc:O(1)
public class Solution {
    public int minPathSum(int[][] A) {
        int n=A.length;
        int m=A[0].length;
        // for the 1st row,
        for(int i=1;i<m;i++)
        {
            A[0][i]=A[0][i-1]+A[0][i];
        }
        // for the 1st col
        for(int i=1;i<n;i++)
        {
            A[i][0]=A[i-1][0]+A[i][0];
        }
        // for the rest of the cells dp[i][j]=a[i][j]+min(up,left)
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                A[i][j]=A[i][j]+Math.min(A[i-1][j],A[i][j-1]);
            }
        }
        return A[n-1][m-1];
    }
}
