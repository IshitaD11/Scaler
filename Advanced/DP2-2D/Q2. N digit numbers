/* Q2. N digit numbers

Problem Description
Find out the number of A digit positive numbers, whose digits on being added equals to a given number B.

Note that a valid number starts from digits 1-9 except the number 0 itself. i.e. leading zeroes are not allowed.

Since the answer can be large, output answer modulo 1000000007



Problem Constraints
1 <= A <= 1000

1 <= B <= 10000



Input Format
First argument is the integer A

Second argument is the integer B



Output Format
Return a single integer, the answer to the problem



Example Input
Input 1:

 A = 2
 B = 4
Input 2:

 A = 1
 B = 3


Example Output
Output 1:

 4
Output 2:

 1


Example Explanation
Explanation 1:

 Valid numbers are {22, 31, 13, 40}
 Hence output 4.
Explanation 2:

 Only valid number is 3 */

public class Solution {
    long mod = 1000000007;
    public int solve(int A, int B) {
        /*long[][] dp = new long[A+1][B+1];
        // sum=1 any count of digit will give only 1 way, have to put 1 in front
        for(int i=1;i<=A;i++)
            dp[i][1]=1;
        // for digit 1, only 1 way possible till min(9,B)
        for(int i=1;i<=Math.min(9,B);i++)
            dp[1][i]=1;

        for(int i=2;i<=A;i++)
        {
            for(int j=2;j<=B;j++)
            {
                dp[i][j]=(dp[i-1][j]+dp[i][j-1])%mod;
            }
        }
        return (int)(dp[A][B]%mod);*/

        Long[][] dp = new Long[A+1][B+1];
        // for 1st digit we can use 1 to 9
        long ans=0L;
        for(int i=1;i<=9;i++)
        {
            ans=(ans+nDigitNum(dp,A-1,B-i))%mod;
        }
        return (int)(ans%mod);
    }
    public Long nDigitNum(Long[][] dp,int dig,int sum)
    {
        if(sum<0)
            return 0L;
        if(sum==0 && dig==0)
            return 1L;
        // if(dig==1)
        //     return 1;   
        if(dig==0)
            return 0L;

        if(dp[dig][sum]!=null)
            return dp[dig][sum];
        long cnt=0;
        for(int i=0;i<=9;i++)
        {
            cnt=(cnt+nDigitNum(dp,dig-1,sum-i))%mod;
        }
        dp[dig][sum]=cnt%mod;
        return dp[dig][sum];
    }
}
