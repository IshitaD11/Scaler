/* Q2. Maximum Unsorted Subarray

Problem Description
Given an array A of non-negative integers of size N. Find the minimum sub-array Al, Al+1 ,..., Ar such that if we sort(in ascending order) that sub-array, then the whole array should get sorted. If A is already sorted, output -1.

Note :
Follow 0-based indexing, while returning the sub-array's starting and ending indexes.



Problem Constraints
1 <= N <= 1000000
1 <= A[i] <= 1000000



Input Format
First and only argument is an array of non-negative integers of size N.



Output Format
Return an array of length two where,
the first element denotes the starting index(0-based) and
the second element denotes the ending index(0-based) of the sub-array.
If the array is already sorted, return an array containing only one element i.e. -1.


Example Input
Input 1:

A = [1, 3, 2, 4, 5]
Input 2:

A = [1, 2, 3, 4, 5]


Example Output
Output 1:

[1, 2]
Output 2:

[-1]


Example Explanation
Explanation 1:

If we sort the sub-array [A1, A2] then the whole array A gets sorted.
Explanation 2:

A is already sorted. */

/*Find out the inner elements which are not sorted
A0,A1,....,Ai,...Aj,...A(n-1) where A0 to A(i-1) is already sorted, A[j+1] to A[n-1] is already sorted
Ai to Aj is the part which is not sorted, and we need to find out where we need to put these elements.
To do that, find the min(Ai..Aj) and max(Ai..Aj)
for the left side, check if A[left]<min(Ai..Aj) --> when A[left]>min(Ai..Aj), we need to put the min value in that position, 
so we found left index of subarray. 
Similarly for right A[right]>max(Ai..Aj) --> when A[right]<max(Ai..Aj), then break, and found the right index of subarray
*/

public class Solution {
    public int[] subUnsort(int[] A) {
        int len=A.length;

        // find the min subarray where A[i]>A[i+1] && A[j]<A[j-1]
        int left=0;
        int right=len-1;
        while(left+1<len && A[left]<=A[left+1])
        {
            left++;
        }

        while(right-1>=0 && A[right]>=A[right-1])
        {
            right--;
        }

        if(left>=(len-1)) //array is sorted
            return new int[]{-1};

        // get the min and max within left to right
        int min=A[left];
        int max=A[right];
        for(int i=left;i<=right;i++)
        {
            min=Math.min(min,A[i]);
            max=Math.max(max,A[i]);
        }

        // now check actual left and right index of unsorted array
        int p1=0;
        int p2=len-1;
        while(p1<len-1 && A[p1]<=min)
            p1++;
        while(p2>=0 && A[p2]>=max)
            p2--;
        int[] ans=new int[2];
        ans[0]=p1;
        ans[1]=p2;
        return ans;
    }
}
