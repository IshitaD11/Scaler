/* Q1. Perfect Numbers

Problem Description
Given an integer A, you have to find the Ath Perfect Number.

A Perfect Number has the following properties:

It comprises only 1 and 2.
The number of digits in a Perfect number is even.
It is a palindrome number.
For example, 11, 22, 112211 are Perfect numbers, where 123, 121, 782, 1 are not.



Problem Constraints
1 <= A <= 100000



Input Format
The only argument given is an integer A.



Output Format
Return a string that denotes the Ath Perfect Number.



Example Input
Input 1:

 A = 2
Input 2:

 A = 3


Example Output
Output 1:

 22
Output 2:

 1111


Example Explanation
Explanation 1:

First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221
Return the 2nd Perfect number.
Explanation 2:

First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221
Return the 3rd Perfect number. */

/*Approach:
1.Initially we will push 11 and 22 in stack
2.Then we remove element and store it in String "ele", increasing count variable
3.We will push perfect number which will be calculated from "ele" ==>  ele_half_substring + ele + ele_remaining_half_substring 
Perfect numbers are 11, 22, 1111, 1221, 2112, 2222, 111111, 112211, 121121..........................
4.while perfoming step 2, whenever count==A that means we got Ath perfect number */

public class Solution {
    public String solve(int A) {
        Queue<StringBuilder> q = new LinkedList<>();

        q.add(new StringBuilder("11"));
        q.add(new StringBuilder("22"));

        for(int i=1;i<A;i++)
        {
            StringBuilder ele = q.poll();
            // Otherwise, append required digits to ele and push in the queue
            int n = ele.length();
            String s1 = ele.substring(0, n / 2);
            String s2 = ele.substring(n / 2);
            q.add(new StringBuilder(s1).append("11").append(s2));
            q.add(new StringBuilder(s1).append("22").append(s2));
        }
        return q.poll().toString();
    }
}
