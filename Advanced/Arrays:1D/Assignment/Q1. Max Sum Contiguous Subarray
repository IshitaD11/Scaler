/* Q1. Max Sum Contiguous Subarray

Store the sum max till now, if we get negative value sum will be less, then start new SubArray
So sum=max of (prev sum+A[i] and A[i]) --> to store subarray sum
maxSum --> to keep track of max sum
TC: O(n) SC: O(1)
*/

Problem Description
Find the contiguous non-empty subarray within an array, A of length N, with the largest sum.



Problem Constraints
1 <= N <= 1e6
-1000 <= A[i] <= 1000



Input Format
The first and the only argument contains an integer array, A.



Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.



Example Input
Input 1:

 A = [1, 2, 3, 4, -10] 
Input 2:

 A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 


Example Output
Output 1:

 10 
Output 2:

 6 


Example Explanation
Explanation 1:

 The subarray [1, 2, 3, 4] has the maximum possible sum of 10. 
Explanation 2:

 The subarray [4,-1,2,1] has the maximum possible sum of 6. */
 
 /* Carry Forward Sum: O(n^2) approch: 
https://www.scaler.com/academy/mentee-dashboard/class/69631/assignment/problems/16121?navref=cl_tt_lst_nm 

public class Solution {
    public int maxSubarray(int A, int B, int[] C) {
        int maxSum=0;
        for(int i=0;i<C.length;i++)
        {
            int sum=0;
            for(int j=i;j<A;j++)
            {
                sum+=C[j];
                if(sum<=B)
                {
                    maxSum=Math.max(maxSum,sum);
                }
                else
                    break;
            }
        }
        return maxSum;
    }
}  */
 
/* Optimised: Store the sum max till now, if we get negative value sum will be less, then start new SubArray
So sum=max of (prev sum+A[i] and A[i]) --> to store subarray sum
maxSum --> to keep track of max sum
TC: O(n) SC: O(1)
*/

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int maxSubArray(final int[] A) {
        int sum=0;
        int maxSum=Integer.MIN_VALUE;
        for(int i=0;i<A.length;i++)
        {
            sum=Math.max((sum+A[i]),A[i]);
            maxSum=Math.max(sum,maxSum);
        }
        return maxSum;
    }
}
