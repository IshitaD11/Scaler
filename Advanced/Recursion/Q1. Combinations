/* Q1. Combinations

Problem Description
Given two integers A and B, return all possible combinations of B numbers out of 1 2 3 ... A.

Make sure the combinations are sorted.

To elaborate,

Within every entry, elements should be sorted. [1, 4] is a valid entry while [4, 1] is not.
Entries should be sorted within themselves.
WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING COMBINATIONS.



Problem Constraints
1 <= A, B <= 10



Input Format
The first argument is an integer A.
The second argument is an integer B.



Output Format
Return a 2-D vector denoting all possible combinations.



Example Input
Input 1:

 A = 4
 B = 2
Input 2:

 A = 3
 B = 2


Example Output
Output 1:

 [
  [1, 2],
  [1, 3],
  [1, 4],
  [2, 3],
  [2, 4],
  [3, 4],
 ]
Output 2:

 [
  [1, 2],
  [1, 3],
  [2, 3]
 ] 


Example Explanation
Explanation 1:

All the possible combinations of size 2 in sorted order. */

/*Add each number from lastNumber+1 to A, to array and check if the combination is correct one, then go to next position
Reduce remaining length in each step, arr length - remaining length = the position we need to add */

public class Solution {
    ArrayList<int[]> combinations;

    public int[][] combine(int A, int B) {
        combinations=new ArrayList<>();
        int[] combination = new int[B];
        possibleCombi(A, B, combination, 0);
        
        int row = combinations.size();
        int[][] ans = new int[row][B];

        for(int i=0;i<row;i++)
        {
            ans[i]=combinations.get(i);
        }
        return ans;
    }

    public void possibleCombi(int maxNum, int remainingLength, int[] arr, int last)
    {
        if(remainingLength==0)
        {
            int[] temp = arr.clone();
            combinations.add(temp);
            return;
        }

        int arrSize = arr.length;
        for(int i=last+1;i<=maxNum;i++)
        {
            if(i<=(maxNum-remainingLength+1))
            {
                arr[arrSize-remainingLength] = i;
                possibleCombi(maxNum,(remainingLength-1),arr,i);
            }
        }
    }
}
