/* Q2. Generate all Parentheses II

Problem Description
Given an integer A pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*A.



Problem Constraints
1 <= A <= 10



Input Format
First and only argument is integer A.



Output Format
Return a sorted list of all possible parenthesis.



Example Input
Input 1:

A = 3
Input 2:

A = 1


Example Output
Output 1:

[ "((()))", "(()())", "(())()", "()(())", "()()()" ]
Output 2:

[ "()" ]


Example Explanation
Explanation 1:

 All paranthesis are given in the output list.
Explanation 2:

 All paranthesis are given in the output list. */
 
 public class Solution {
    ArrayList<String> possibleParentheses;

    public String[] generateParenthesis(int A) {
        possibleParentheses = new ArrayList<String>();

        String generatedParenthesis = "";
        int openBracket = 0;
        int closeBracket = 0; 
        generateParenthesis(A,generatedParenthesis,openBracket,closeBracket);

        return possibleParentheses.toArray(new String[possibleParentheses.size()]);

    }
    
    public void generateParenthesis(int A,String generatedParenthesis,int openBracket,int closeBracket)
    {
        if(generatedParenthesis.length()==2*A)
        {
            possibleParentheses.add(generatedParenthesis);
            return;
        }

        if(openBracket<A) 
        {
            generateParenthesis(A,generatedParenthesis+"(",openBracket+1,closeBracket);
        }

        if(closeBracket<openBracket) 
        {
            generateParenthesis(A,generatedParenthesis+")",openBracket,closeBracket+1);
        }
    }

}
