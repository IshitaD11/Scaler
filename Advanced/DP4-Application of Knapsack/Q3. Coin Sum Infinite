/* Q3. Coin Sum Infinite

Problem Description
You are given a set of coins A. In how many ways can you make sum B assuming you have infinite amount of each coin in the set.

NOTE:

Coins in set A will be unique. Expected space complexity of this problem is O(B).
The answer can overflow. So, return the answer % (106 + 7).


Problem Constraints
1 <= A <= 500
1 <= A[i] <= 1000
1 <= B <= 50000



Input Format
First argument is an integer array A representing the set.
Second argument is an integer B.



Output Format
Return an integer denoting the number of ways.



Example Input
Input 1:

 A = [1, 2, 3]
 B = 4
Input 2:

 A = [10]
 B = 10


Example Output
Output 1:

 4
Output 2:

 1


Example Explanation
Explanation 1:

 The 4 possible ways are:
 {1, 1, 1, 1}
 {1, 1, 2}
 {2, 2}
 {1, 3} 
Explanation 2:

 There is only 1 way to make sum 10. */

public class Solution {
    long mod = 1000007;
    /*public int coinchange2(int[] A, int B) {
        int n=A.length;
        int[] dp=new int[B+1];
        int ans = coinCombination(A,dp,0,B);
        return (int)(ans%mod);
    }
    public int coinCombination(int[] A,int[] dp,int idx,int sum)
    {
        if(sum==0)
        {    
            return 1;
        }
        if(idx==A.length)
            return 0;

        // if(dp[sum]!=0)
        //     return dp[sum];

        long ans=0;
        for(int i=0;i<=sum;i=i+A[idx])
        {
            // System.out.println("i"+i);
            // System.out.println("A[idx]"+A[idx]);
            ans = (int)((ans + (long)coinCombination(A,dp,idx+1,sum-i))%mod);
            // System.out.println("dp"+dp[idx]);
        }
        dp[sum] = (int)ans;
        return dp[sum];
    }*/

    public int coinchange2(int[] A, int B) {
        int[] dp = new int[B+1];
        dp[0]=1;
        for(int i=0;i<A.length;i++) //elements
        {
            for(int j=1;j<=B;j++) //sum
            {
                if(A[i]<=j)
                    dp[j]=(int)(((long)dp[j]+(long)dp[j-A[i]])%mod);
            }
        }
        return dp[B];
    }

}
