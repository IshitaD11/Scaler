/* Q2. Copy List

Q2. Copy List
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
You are given a linked list A
Each node in the linked list contains two pointers: a next pointer and a random pointer
The next pointer points to the next node in the list
The random pointer can point to any node in the list, or it can be NULL
Your task is to create a deep copy of the linked list A
The copied list should be a completely separate linked list from the original list, but with the same node values and random pointer connections as the original list
You should create a new linked list B, where each node in B has the same value as the corresponding node in A
The next and random pointers of each node in B should point to the corresponding nodes in B (rather than A)


Problem Constraints
0 <= |A| <= 106



Input Format
The first argument of input contains a pointer to the head of linked list A.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Given list
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  


Example Output
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1 */

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */

/* source List : 1 -> 2 -> 3
New list : 1 -> 1 -> 2 -> 2 -> 3 -> 3  
copy the random nodes to next copied nodes
delete the actual nodes in [], keep the new nodes --> [1] -> 1 -> [2] -> 2 -> [3] -> 3  
*/


public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null)
            return null;
        // add new nodes in between each nodes, same value as the previous node
        RandomListNode node = head;
        while(node!=null)
        {
            RandomListNode nn = new RandomListNode(node.label);
            RandomListNode nextNode = node.next;
            node.next=nn;
            nn.next=nextNode;
            node=node.next.next;
        }

        // print(head);
        // copy the random nodes to the newly created next nodes
        node = head;
        while(node!=null)
        {
            RandomListNode rand = node.random;
            RandomListNode nn = node.next;
            if(rand!=null)
                nn.random = rand.next;
            node=node.next.next;
        }

        // delete the old nodes
        node = head.next;
        while(node.next!=null)
        {
            node.next = node.next.next;
            node=node.next;
        }
        return head.next;
    }
    public void print(RandomListNode head)
    {
        while(head!=null)
        {
            System.out.print(head.label+"->");
            head=head.next;
        }
        System.out.println("");
    }
}
