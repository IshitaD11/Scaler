/* Q1. Partition List

Problem Description
Given a linked list A and a value B, partition it such that all nodes less than B come before nodes greater than or equal to B.

You should preserve the original relative order of the nodes in each of the two partitions.



Problem Constraints
1 <= |A| <= 106

1 <= A[i], B <= 109



Input Format
The first argument of input contains a pointer to the head to the given linked list.

The second argument of input contains an integer, B.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

A = [1, 4, 3, 2, 5, 2]
B = 3
Input 2:

A = [1, 2, 3, 1, 3]
B = 2


Example Output
Output 1:

[1, 2, 2, 4, 3, 5]
Output 2:

[1, 1, 2, 3, 3]


Example Explanation
Explanation 1:

 [1, 2, 2] are less than B wheread [4, 3, 5] are greater than or equal to B.
Explanation 2:

 [1, 1] are less than B wheread [2, 3, 3] are greater than or equal to B. */

// TC: O(n) SC:O(1)

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode partition(ListNode A, int B) {
        // create two dummy head nodes
        ListNode h1=new ListNode(-1);
        ListNode h2=new ListNode(-1);
        ListNode node1=h1;
        ListNode node2=h2;

        // add nodes to h1 is val<B, else add in h2
        ListNode node = A;
        while(node!=null)
        {
            int val = node.val;
            ListNode curr = node;
            node=node.next;
            curr.next=null; //break curr node
            if(val<B)
            {
                node1.next=curr;
                node1=node1.next;
            }
            else
            {
                node2.next=curr;
                node2=node2.next;
            }
            
        }
        // join LL1 with LL2
        node1.next=h2.next;
        return h1.next;
    }
}
