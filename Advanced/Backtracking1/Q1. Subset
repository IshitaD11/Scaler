/* Q1. Subset

Problem Description
Given a set of distinct integers A, return all possible subsets.

NOTE:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Also, the subsets should be sorted in ascending ( lexicographic ) order.
The initial list is not necessarily sorted.


Problem Constraints
1 <= |A| <= 16
INTMIN <= A[i] <= INTMAX


Input Format
First and only argument of input contains a single integer array A.



Output Format
Return a vector of vectors denoting the answer.



Example Input
Input 1:

A = [1]
Input 2:

A = [1, 2, 3]


Example Output
Output 1:

[
    []
    [1]
]
Output 2:

[
 []
 [1]
 [1, 2]
 [1, 2, 3]
 [1, 3]
 [2]
 [2, 3]
 [3]
]


Example Explanation
Explanation 1:

 You can see that these are all possible subsets.
Explanation 2:

You can see that these are all possible subsets. */

// 2 cases: either the number is contributing in ans, or not. TC:2^n

public class Solution {
    ArrayList<ArrayList<Integer>> ans= new ArrayList<>();
    
    public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> A) {
        Collections.sort(A);
        findSubsets(A,0,new ArrayList<Integer>());
        ans.sort((x, y) -> {
                for (int i = 0; i < Math.min(x.size(), y.size()); i++) {
                    if (x.get(i) != y.get(i)) {
                        return x.get(i) - y.get(i);
                    }
                }
                return x.size() - y.size();
            });
        return ans;
    }

    public void findSubsets(ArrayList<Integer> arr,int idx,ArrayList<Integer> list)
    {
        if(idx==arr.size())
        {    
            ArrayList<Integer> newList = new ArrayList<Integer>();
            newList.addAll(list);
            Collections.sort(newList);
            ans.add(newList);
            return;
        }
        // not contribute
        findSubsets(arr,idx+1,list);
        // for contribute
        list.add(arr.get(idx));
        findSubsets(arr,idx+1,list);
        list.remove(list.size()-1);
    }
}
