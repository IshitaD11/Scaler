/* Q1. Number of Squareful Arrays

Problem Description
Given an array of integers A, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Find and return the number of permutations of A that are squareful. Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].



Problem Constraints
1 <= length of the array <= 12

1 <= A[i] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return the number of permutations of A that are squareful.



Example Input
Input 1:

 A = [2, 2, 2]
Input 2:

 A = [1, 17, 8]


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Only permutation is [2, 2, 2], the sum of adjacent element is 4 and 4 and both are perfect square.
Explanation 2:

 Permutation are [1, 8, 17] and [17, 8, 1]. */

// create all permutation and check if the adjacent pairs are square
public class Solution {
    int count=0;
    public int solve(int[] A) {
        // edge case if length==1, no pair can be created
        if(A.length==1)
            return 0;
        int[] per = new int[A.length];
        // create freq array to store freq
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<A.length;i++)
            map.put(A[i],map.getOrDefault(A[i],0)+1);
        permute(A,0,per,map);
        return count;
    }
    public void permute (int[] A,int idx,int[] per,HashMap<Integer,Integer> map)
    {
        if(idx==A.length)
        {
            count++; return;
        }

        for(int key:map.keySet())
        {
            if(map.get(key)!=0)
            {
                if(idx==0 || (idx!=0 && checkPerfectSqr(key,per[idx-1])))
                {
                    map.put(key,(map.get(key)-1));
                    per[idx]=key;
                    permute(A,idx+1,per,map);
                    map.put(key,(map.get(key)+1));
                }
            }
        }
    }
    public boolean checkPerfectSqr(int a,int b)
    {
        long sqrt = (long)(Math.sqrt((long)(a+b)));
        // System.out.println(sqrt);
        return ((sqrt*sqrt)==(long)(a+b));
    }
}
