/* Q4. Unique Paths III

Problem Description
Given a matrix of integers A of size N x M . There are 4 types of squares in it:

1. 1 represents the starting square.  There is exactly one starting square.
2. 2 represents the ending square.  There is exactly one ending square.
3. 0 represents empty squares we can walk over.
4. -1 represents obstacles that we cannot walk over.
Find and return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

Note: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
2 <= N * M <= 20
-1 <= A[i] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.



Example Input
Input 1:

A = [   [1, 0, 0, 0]
        [0, 0, 0, 0]
        [0, 0, 2, -1]   ]
Input 2:

A = [   [0, 1]
        [2, 0]    ]


Example Output
Output 1:

2
Output 2:

0


Example Explanation
Explanation 1:

We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Explanation 1:

There are no such paths. */

//as we need to traverse all 0 boxes, need a emptyCounter. From each box go left, right, up, down
// TC: 4^(n*m) SC:n*m
public class Solution {
    int[] dx={0,-1,0,1};
    int[] dy={-1,0,1,0};
    int cnt=0;
    public int solve(ArrayList<ArrayList<Integer>> A) {
        // find the starting and ending points
        int stx=0;
        int sty=0;
        int emptyCnt=0;
        for(int i=0;i<A.size();i++)
        {
            for(int j=0;j<A.get(i).size();j++)
            {
                if(A.get(i).get(j)==1)
                {
                    stx=i;
                    sty=j;
                }
                if(A.get(i).get(j)==0)
                {
                    emptyCnt++;
                }
            }
        }

        check(A,stx,sty,emptyCnt);
        return cnt;
    }
    public void check(ArrayList<ArrayList<Integer>> A, int x,int y,int emptyCnt)
    {
        if(A.get(x).get(y)==2 && emptyCnt==-1)
        {   
            cnt++; 
            return;
        }
        else if(A.get(x).get(y)==2)
            return;

        A.get(x).set(y,-1);
        // System.out.println(A);
        for(int i=0;i<4;i++)
        {
            int xi=x+dx[i];
            int yi=y+dy[i];
            if(xi>=0 && yi>=0 && xi<A.size() && yi<A.get(x).size() && A.get(xi).get(yi)!=-1)
                check(A,xi,yi,emptyCnt-1);
        }
        A.get(x).set(y,0);
        // System.out.println(A);
        // return cnt;
    }
}
