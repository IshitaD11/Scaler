/* Q3. Check Bipartite Graph

Problem Description
Given a undirected graph having A nodes. A matrix B of size M x 2 is given which represents the edges such that there is an edge between B[i][0] and B[i][1].

Find whether the given graph is bipartite or not.

A graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B

Note:

There are no self-loops in the graph.

No multiple edges between two pair of vertices.

The graph may or may not be connected.

Nodes are Numbered from 0 to A-1.

Your solution will run on multiple testcases. If you are using global variables make sure to clear them.



Problem Constraints
1 <= A <= 100000

1 <= M <= min(A*(A-1)/2,200000)

0 <= B[i][0],B[i][1] < A



Input Format
The first argument given is an integer A.

The second argument given is the matrix B.



Output Format
Return 1 if the given graph is bipartide else return 0.



Example Input
Input 1:

A = 2
B = [ [0, 1] ]
Input 2:

A = 3
B = [ [0, 1], [0, 2], [1, 2] ]


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

Put 0 and 1 into 2 different subsets.
Explanation 2:

 
It is impossible to break the graph down to make two different subsets for bipartite matching */

// TC:O(A+E) SC:O(A+E)

public class Solution {
    public int solve(int A, int[][] B) {
        // we will have a color graph to store 0/1 to identify different sets: 0 is a set and 1 is another set
        int[] color = new int[A];
        Arrays.fill(color,-1);

        // create the graph
        ArrayList<Integer>[] graph = new ArrayList[A];
        for(int i=0;i<A;i++)
            graph[i]=new ArrayList<>();

        for(int i=0;i<B.length;i++)
        {    
            graph[B[i][0]].add(B[i][1]);
            graph[B[i][1]].add(B[i][0]);
        }


        // bfs to go to all nodes and put their colors
        Queue<Integer> q = new LinkedList<>();

        for(int i=0;i<A;i++)
        {
            if(color[i]==-1)
            {
                q.add(i);
                color[i]=0;

                while(q.size()>0)
                {
                    int curr = q.remove();

                    for(int nbr:graph[curr])
                    {
                        if(color[nbr]==color[curr])
                            return 0;
                        
                        if(color[nbr]==-1)
                        {
                            q.add(nbr);
                            color[nbr]=1-color[curr]; //if curr=0, nbr=1. if curr=1, nbr=0;
                        }
                    }
                }
            }
        }
        return 1;
    }
}
