/* Q1. Sheldon and Pair of Cities

Problem Description
Sheldon lives in a country with A cities (numbered from 1 to A) and B bidirectional roads.

Roads are denoted by integer array D, E and F of size M, where D[i] and E[i] denotes the cities and F[i] denotes the distance between the cities.

Now he has many lectures to give in the city and is running short of time, so he asked you C queries, for each query i, find the shortest distance between city G[i] and H[i].

If the two cities are not connected then the distance between them is assumed to be -1.



Problem Constraints
1 <= A <= 200

1 <= B <= 200000

1 <= C <= 100000

1 <= F[i] <= 1000000

1 <= D[i], E[i], G[i], H[i] <= A



Input Format
First argument is an integer A.
Seocnd argument is an integer B.
Third argument is an integer C.
Fourth argument is an integer array D.
Fifth argument is an integer array E.
Sixth argument is an integer array F.
Seventh argument is an integer array G.
Eight argument is an integer array H.



Output Format
Return an integer array of size C, for each query denoting the shortest distance between the given two vertices.
If the two vertices are not connected then output -1.



Example Input
Input 1:

 A = 4
 B = 6
 C = 2
 D = [1, 2, 3, 2, 4, 3]
 E = [2, 3, 4, 4, 1, 1]
 F = [4, 1, 1, 1, 1, 1]
 G = [1, 1]
 H = [2, 3]
Input 2:

 A = 3
 B = 3
 C = 2
 D = [1, 2, 1]
 E = [2, 3, 3]
 F = [3, 1, 1]
 G = [2, 1]
 H = [3, 2]


Example Output
Output 1:

 [2, 1]
Output 2:

 [1, 2]


Example Explanation
Explanation 1:

 Distance between (1,2) will 2 if we take path 1->4->2.
 Distance between (1,3) will 1 if we take path 1->3.
Explanation 2:

 Distance between (2,3) will 1 if we take path 1->3.
 Distance between (1,2) will 2 if we take path 1->3->2. */

public class Solution {
    public ArrayList<Integer> solve(int A, int B, int C, ArrayList<Integer> D, ArrayList<Integer> E, ArrayList<Integer> F, ArrayList<Integer> G, ArrayList<Integer> H) {
        // use Floyed Walshal algo to relax the egdes to get the min distance between i-j using adjacency matrix
        // answer can be queries in O(1)

        int[][] mat = new int[A+1][A+1];
        for(int i=0;i<=A;i++)
        {
            Arrays.fill(mat[i],Integer.MAX_VALUE);
        }

        for(int i=0;i<=A;i++)
        {
            mat[i][i]=0;
        }

        for(int i=0;i<B;i++)
        {
            int c1=D.get(i);
            int c2=E.get(i);
            int dist = F.get(i);
            mat[c1][c2]=Math.min(dist,mat[c1][c2]);
            mat[c2][c1]=Math.min(dist,mat[c2][c1]);
        }

        // System.out.println(Arrays.deepToString(mat));

        for(int i=1;i<=A;i++)
        {
            for(int st=1;st<=A;st++)
            {
                for(int en=1;en<=A;en++)
                {
                    if(st==en)
                        continue;
                    if(mat[st][i]!=Integer.MAX_VALUE && mat[i][en]!=Integer.MAX_VALUE && mat[st][i]+mat[i][en]<mat[st][en])
                    {
                        mat[st][en]=mat[st][i]+mat[i][en];
                    }
                }
            }
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0;i<C;i++)
        {
            int n1=G.get(i);
            int n2=H.get(i);
            int path=-1;
            if(mat[n1][n2]!=Integer.MAX_VALUE)
                path=mat[n1][n2];
            if(mat[n2][n1]!=Integer.MAX_VALUE)
                path=Math.min(path,mat[n2][n1]);
            ans.add(path);
        }
        return ans;
    }
}
