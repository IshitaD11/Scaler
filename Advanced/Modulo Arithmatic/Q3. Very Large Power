/* Q3. Very Large Power

Problem Description
Given two Integers A, B. You have to calculate (A ^ (B!)) % (1e9 + 7).

"^" means power,
"%" means mod, and
"!" means factorial.

Note: Ensure to handle integer overflow when performing the calculations.


Problem Constraints
1 <= A, B <= 5e5



Input Format
First argument is the integer A

Second argument is the integer B



Output Format
Return one integer, the answer to the problem



Example Input
Input 1:

A = 1
B = 1
Input 2:

A = 2
B = 2


Example Output
Output 1:

1
Output 2:

4


Example Explanation
Explanation 1:

 1! = 1. Hence 1^1 = 1.
Explanation 2:

 2! = 2. Hence 2^2 = 4. */
 
 /*Ferment's theorem: A^(m-1)%m = 1 and m = 1000000007 is a prime no, so we can use ferment's theorem.
In power function, as Fermet’s theorem states (A^(p-1))%p = 1 where p is prime number, here p=1e9+7, 
so we are raising the power of A to p-1 which is 1e9+6.

And in factorial function, B! can turn out to be greater than p and let’s say B! = p+1.
and when finding power we need to calculate A^(B!) = A^(p+1)
but we know A^(p-1) = 1, so we can rewrite our required equation A^(p+1) to A^(p-1) * A^(2)
and if you observe 2 is the remainder of B! % (p-1). So to bring fact(A) in range of 0 to (p-1) we are taking mod = (p-1) 
*/


public class Solution {
    public int solve(int A, int B) {

        int mod=1000000007;
        return pow(A,fact(B),mod);
    }

    public int pow(int A, int B, int m)
    {
        if(B==0)
            return 1;
        long tmp = pow(A,B/2,m);
        long ans = (tmp*tmp)%m;
        if(B%2==0)
            return (int)ans;
        else
            return (int)((ans*A)%m);
    }

    public int fact(int A)
    {
        int m1=1000000006;  //mod-1 for Ferment's theorem
        if(A<2)
            return 1;
        long tmp = fact(A-1);
        long ans = (tmp*A)%m1;
        return (int)(ans);
    }
}
