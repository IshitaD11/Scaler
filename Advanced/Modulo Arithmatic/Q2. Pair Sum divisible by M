/* Q2. Pair Sum divisible by M

Problem Description
Given an array of integers A and an integer B, find and return the number of pairs in A whose sum is divisible by B.

Since the answer may be large, return the answer modulo (109 + 7).

Note: Ensure to handle integer overflow when performing the calculations.


Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 106



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return the total number of pairs for which the sum is divisible by B modulo (109 + 7).



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
 B = 2
Input 2:

 A = [5, 17, 100, 11]
 B = 28


Example Output
Output 1:

 4
Output 2:

 1


Example Explanation
Explanation 1:
 All pairs which are divisible by 2 are (1,3), (1,5), (2,4), (3,5). 
 So total 4 pairs.
Explanation 2:
 There is only one pair which is divisible by 28 is (17, 11) */
 
 public class Solution {
    public int solve(int[] A, int B) {

        int n=A.length;
        long mod = 1000000007;
        // store freq of remainder in new array
        long[] cnt = new long[B];

        for(int i=0;i<n;i++)
        {
            int rem = A[i]%B;
            cnt[rem]++;
        }

        long ans=0;
        // handle edge case, when rem=0, how many pair can 0 can with themselves
        ans += (cnt[0]*(cnt[0]-1))/2;

        // handle edge case, when B is even, need to handle when rem = (B/2), these will make pair with themselves
        if(B%2==0)
        {
            long mid = cnt[B/2];
            ans += (mid*(mid-1))/2;
        }

        // count answer for all remaining pairs [1+9=10], so take first and last count and make them pair
        int st=1;
        int en=B-1;

        while(st<en)
        {
            ans+=cnt[st]*cnt[en];
            st++;
            en--;
        }

        return (int)(ans%mod);
    }
}
