/* Q2. Mod Sum

Problem Description
Given an array of integers A, calculate the sum of A [ i ] % A [ j ] for all possible i, j pairs. Return sum % (109 + 7) as an output.



Problem Constraints
1 <= length of the array A <= 105

1 <= A[i] <= 103



Input Format
The only argument given is the integer array A.



Output Format
Return a single integer denoting sum % (109 + 7).



Example Input
Input 1:

 A = [1, 2, 3]
Input 2:

 A = [17, 100, 11]


Example Output
Output 1:

 5
Output 2:

 61


Example Explanation
Explanation 1:

 (1 % 1) + (1 % 2) + (1 % 3) + (2 % 1) + (2 % 2) + (2 % 3) + (3 % 1) + (3 % 2) + (3 % 3) = 5 */
 
 public class Solution {
    public int solve(int[] A) {

        // put all elements to a frequncy map
        int[] freq = new int[1001];
        for(int i=0;i<A.length;i++)
        {
            freq[A[i]]++;
        }

        int n=A.length;
        long mod=1000000007;
        long sum=0;
        long val=0;

        for(int i=0;i<1001;i++)
        {
            val=0;
            if(freq[i]!=0)
            {
                for(int j=0;j<n;j++)
                {
                    val = i%A[j];
                    sum = (sum + (val*(long)freq[i])%mod)%mod;
                }
            }
        }
        return (int)(sum%mod);
    }
}
