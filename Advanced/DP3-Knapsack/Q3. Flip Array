/* Q3. Flip Array

Problem Description

Given an array A of positive elements, you have to flip the sign of some of its elements such that the resultant sum of the elements of array should be minimum non-negative(as close to zero as possible).

Return the minimum number of elements whose sign needs to be flipped such that the resultant sum is minimum non-negative.



Problem Constraints

1 <= length of(A) <= 100

Sum of all the elements will not exceed 10,000.



Input Format

First and only argument is an integer array A.



Output Format

Return an integer denoting the minimum number of elements whose sign needs to be flipped.



Example Input

Input 1:

 A = [15, 10, 6]
Input 2:

 A = [14, 10, 4]


Example Output

Output 1:

 1
Output 2:

 1


Example Explanation

Explanation 1:

 Here, we will flip the sign of 15 and the resultant sum will be 1.
Explanation 2:

 Here, we will flip the sign of 14 and the resultant sum will be 0.
 Note that flipping the sign of 10 and 4 also gives the resultant sum 0 but flippings there sign are not minimum.
*/

// If I divide the array into pos and neg elements, then for negeative elements if sum<=(arr tot sum)/2 then total sum of pos and neg elements will be close to 0.
// two things to consider, maximum sum till sum/2 and minimum elements to be selected to reach sum/2

public class Solution {
    public class Pair
    {
        int sum;
        int flip;
        Pair(int s,int p)
        {
            sum=s;
            flip=p;
        }
    }
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int solve(final int[] A) {
        // Similar to 0/1 knapsack
        // get the capacity to be total sum/2
        int sum=0;
        for(int i=0;i<A.length;i++)
            sum+=A[i];

        int n=A.length;
        int m=sum/2;
        Pair[][] dp = new Pair[n+1][m+1];

        // first row, no elements selected will be having 0 sum,0 flip
        // similarly for first col, to get to 0 sum, 0 flips required as sum already 0

        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(i==0 || j==0)
                    dp[i][j]=new Pair(0,0);
                else
                {
                    Pair rej=dp[i-1][j];
                    Pair sel=new Pair(0,0);
                    if(j>=A[i-1])
                    {
                        int ss = A[i-1]+dp[i-1][j-A[i-1]].sum;
                        int fl = 1+dp[i-1][j-A[i-1]].flip;
                        sel=new Pair(ss,fl); //add sum and +1 to flip from prev selection dp[i-1][j-A[i-1]]
                    }
                    Pair final_val;
                    // compare between select and reject
                    if(rej.sum==sel.sum)
                    {
                        final_val = (rej.flip<sel.flip)?rej:sel;
                    }
                    else
                    {
                        final_val = (rej.sum<sel.sum)?sel:rej;
                    }
                    dp[i][j]=final_val;
                }
            }
        }
        return dp[n][m].flip;
    }
}
