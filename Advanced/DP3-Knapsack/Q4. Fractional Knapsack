/* Q4. Fractional Knapsack

Problem Description
Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.

Also given an integer C which represents knapsack capacity.

Find out the maximum total value that we can fit in the knapsack. If the maximum total value is ans, then return ⌊ans × 100⌋ , i.e., floor of (ans × 100).

NOTE:

You can break an item for maximizing the total value of the knapsack


Problem Constraints
1 <= N <= 105

1 <= A[i], B[i] <= 103

1 <= C <= 103



Input Format
First argument is an integer array A of size N denoting the values on N items.

Second argument is an integer array B of size N denoting the weights on N items.

Third argument is an integer C denoting the knapsack capacity.



Output Format
Return a single integer denoting the maximum total value of A such that sum of the weights of this subset is smaller than or equal to C.



Example Input
Input 1:

 A = [60, 100, 120]
 B = [10, 20, 30]
 C = 50
Input 2:

 A = [10, 20, 30, 40]
 B = [12, 13, 15, 19]
 C = 10


Example Output
Output 1:

 24000
Output 2:

 2105


Example Explanation
Explanation 1:

Taking the full items with weight 10 and 20 and 2/3 of the item with weight 30 will give us 
the maximum value i.e 60 + 100 + 80 = 240. So we return 24000.
Explanation 2:

Taking 10/19 the fourth item gives us the maximum value i.e. 21.0526. So we return 2105. */

public class Solution {
    public class Pair
    {
        int val;
        int wgt;
        Pair(int v,int wt)
        {
            val=v;
            wgt=wt;
        }
    }
    public int solve(int[] A, int[] B, int C) {
        // add the elements in Pair to sort by (val/wgt) ratio, to select max ratio possible
        Pair[] pArr = new Pair[A.length];
        for(int i=0;i<A.length;i++)
        {
            pArr[i]=new Pair(A[i],B[i]);
        }
        Arrays.sort(pArr,new Comparator<Pair>(){
            @Override
            public int compare(Pair a,Pair b)
            {
                double aRatio = (a.val*100)/(a.wgt);
                double bRatio = (b.val*100)/(b.wgt);
                return (int)(bRatio-aRatio);
            }
        });

        // select from the already sorted by ratio Pair array to get the max ratio first
        double ans = 0;
        for(int i=0;i<pArr.length;i++)
        {
            if(C>=pArr[i].wgt)
            {
                ans+=(pArr[i].val*100);
                C=C-pArr[i].wgt;
            }
            else
            {
                // System.out.println("ratio:"+((pArr[i].val*1.0)/pArr[i].wgt));
                ans+=(C*100)*((pArr[i].val*1.0)/pArr[i].wgt);
                // System.out.println(ans);
                break;
            }
        }
        // System.out.println(ans*100);
        return (int)(ans);
    }
}
