/* Find Two Missing Numbers

https://www.codingninjas.com/codestudio/problems/find-two-missing-numbers_1214700?leftPanelTab=0

You are given an array of unique elements where each element in the array is in range [1 N]. The array has all distinct element and the array size is (N-2). 
Hence two number from the range are missing from the array. Your task is to return two missing numbers.

Example: If N is 6
array is [1,3,6,5] 
Missing elements are 2,4 */

/*Similar to finding 2 unique element in the array where all other elements are present twice
We have 1 to n information. And array elements, which is also 1 to n, except for 2
So if we XOR 1 to n numbers and xor array elements, we will be left with XOR of the missing elelments 
Now check the set bit in XOR answer, set bit means 1 element has setbit and 1 element has unset bit at that position. So mane 2 groups based on the position's bit if set and if unset.
So my 2 missing nos will be there is 2 groups.
*/

import java.util.* ;
import java.io.*; 
public class Solution {
	public static ArrayList<Integer> findMissingNumbers(ArrayList<Integer> arr, int n) {
		int xor = 0;

		// xor all n numbers
		for(int i=1;i<=n;i++)
		{	
			xor=xor^i;
		}
		// xor all array elements
		for(int i=0;i<arr.size();i++)
		{
			xor=xor^arr.get(i);
		}

		// System.out.println("xor"+xor);
		// find the bit position which is set
		int setBit=0;
		for(int i=0;i<32;i++)
		{
			if(((xor>>i)&1)==1) //ith bit is set
			{
				setBit=i;
				break;
			}
		}

		// segregate all the elements(n numbers & array elements) in two groups
		// 1 where ith bit is set and 1 where ith bit is unset
		int setGrp=0;
		int unSetGrp=0;
		// check all n numbers
		for(int i=1;i<=n;i++)
		{
			if(((i>>setBit)&1)==1)
				setGrp=setGrp^i;
			else
				unSetGrp=unSetGrp^i;
		}
		// check all array elements
		for(int i=0;i<arr.size();i++)
		{
			if(((arr.get(i)>>setBit)&1)==1)
				setGrp=setGrp^arr.get(i);
			else
				unSetGrp=unSetGrp^arr.get(i);
		}

		// create answer arrayList
		ArrayList<Integer> ans = new ArrayList<Integer>();
		ans.add(Math.min(setGrp,unSetGrp));
		ans.add(Math.max(unSetGrp,setGrp));
		return ans;
	}
}



