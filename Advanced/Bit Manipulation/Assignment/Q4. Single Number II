/* Q4. Single Number II

Problem Description
Given an array of integers, every element appears thrice except for one, which occurs once.

Find that element that does not appear thrice.

NOTE: Your algorithm should have a linear runtime complexity.

Could you implement it without using extra memory?




Problem Constraints
2 <= A <= 5*106

0 <= A <= INTMAX



Input Format
First and only argument of input contains an integer array A.



Output Format
Return a single integer.



Example Input
Input 1:

 A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1]
Input 2:

 A = [0, 0, 0, 1]


Example Output
Output 1:

 4
Output 2:

 1


Example Explanation
Explanation 1:

 4 occurs exactly once in Input 1.
 1 occurs exactly once in Input 2. */
 
 /*sum count each bit for the whole array element. if the bit count%3==0 , means it is coming from the elements which are present trice.
if count%3!=0 means there other element where bit is set, that is the unique element 
So summarize, take sum of each bit of all the array elements, 
if count%3==0 then ans bit is unset
if count%3!=0 then ans bit is set */

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int singleNumber(final int[] A) {
        int n=A.length;
        int ans=0;

        // count each bit of array elements
        for(int i=0;i<32;i++)
        {
            int cnt=0;
            for(int j=0;j<n;j++)
            {
                // check if setbit cnt++
                if(((A[j]>>i)&1)==1)
                    cnt++;
            }

            if((cnt%3)!=0)
            {
                ans = ans | (1<<i);
            }
        }
        return ans;
    }
}
