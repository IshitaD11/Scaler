/* Problem Description
Given an array of positive integers A, two integers appear only once, and all the other integers appear twice.
Find the two integers that appear only once.

Note: Return the two numbers in ascending order.


Problem Constraints
2 <= |A| <= 100000
1 <= A[i] <= 109



Input Format
The first argument is an array of integers of size N.



Output Format
Return an array of two integers that appear only once.



Example Input
Input 1:
A = [1, 2, 3, 1, 2, 4]
Input 2:

A = [1, 2]


Example Output
Output 1:
[3, 4]
Output 2:

[1, 2]


Example Explanation
Explanation 1:
3 and 4 appear only once.
Explanation 2:

1 and 2 appear only once. */

/*XOR all elements: {10, 6, 7, 5, 6, 10} output will be 7^5 
a = 7   0111 
b = 5   0101
--------------
XOR     0010  ----> Need to find the set bit in XOR answer. 

Based on the set bit's position, if we split the array in 2 parts. when 1st bit is set and where 1st bit is unset.
Then 7 and 5 will be in 2 different groups.
group 1 (1st bit set) = {6. 6. 7, 10, 10} . group 2(1st bit is unset) = {5}
now take XOR in each group. We will get the unique elements from each groups.
*/

public class Solution {
    public int[] solve(int[] A) {
        int xor = 0;
        int n=A.length;

        // XOR the whole array
        for(int i=0;i<n;i++)
        {
            xor=xor^A[i];
        }

        int setbit = 0;
        // check set bit in xor
        for(int i=0;i<32;i++)
        {
            if((xor&(1<<i))!=0)
            {
                setbit=i;
                break;
            }
        }

        int setGrp=0;
        int unSetGrp =0;
        // group by the setbit if set and if unset
        for(int i=0;i<n;i++)
        {
            if(((A[i]>>setbit)&1)==1) //ith bit is set 
                setGrp=setGrp^A[i];
            else
                unSetGrp = unSetGrp^A[i];
        }

        // put setGrp and unSetGrp in ans array
        int[] ans={Math.min(setGrp,unSetGrp) , Math.max(setGrp,unSetGrp)};
        return ans;
    }
}
