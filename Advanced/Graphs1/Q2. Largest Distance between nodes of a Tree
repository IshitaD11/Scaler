/* Q2. Largest Distance between nodes of a Tree

Problem Description
Find largest distance Given an arbitrary unweighted rooted tree which consists of N (2 <= N <= 40000) nodes.

The goal of the problem is to find largest distance between two nodes in a tree. Distance between two nodes is a number of edges on a path between the nodes (there will be a unique path between any pair of nodes since it is a tree).

The nodes will be numbered 0 through N - 1.

The tree is given as an array A, there is an edge between nodes A[i] and i (0 <= i < N). Exactly one of the i's will have A[i] equal to -1, it will be root node.



Problem Constraints
2 <= |A| <= 40000



Input Format
First and only argument is vector A



Output Format
Return the length of the longest path



Example Input
Input 1:

 
A = [-1, 0]
Input 2:

 
A = [-1, 0, 0]


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Path is 0 -> 1.
Explanation 2:

 Path is 1 -> 0 -> 2. */

// Idea is to find farthest node from any node, that is always on the end point of diameter, now get the farthest node from the end point
// 2 dfs calls to do, and we need to maintain, max distance and node of the max distance
// Idea 2, for root node, visit the whole graph, for a particular node, get the max 2 largest length path, and return largest path+1 as current node path
// for diameter, sum 2 largest node path, that will create a diameter
// diameter/distance is considered in edges, max paths are considered as nodes

public class Solution {
    int maxDist = 0;

    public int solve(ArrayList<Integer> A) {
        // create the graph
        int n=A.size();
        ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i=0;i<n;i++)
            graph[i]=new ArrayList();
        
        for(int i=0;i<n;i++)
        {
            if(A.get(i)!=-1)
            {
                graph[A.get(i)].add(i);
                graph[i].add(A.get(i));
            }
        }

        // visited array so that we dont do infinite loop
        boolean[] vis = new boolean[n];

        // get dfs from any point, we will select 0
        dfs(0,graph,vis);

        return maxDist;
    }
    public int dfs(int root, ArrayList<Integer>[] graph , boolean[] vis)
    {
        // in dfs need to get two highest length paths, and diameter is sum of those two path, keep track of max diameter
        vis[root]=true;

        int highest=0;
        int secondHighest=0;

        for(int nbr:graph[root])
        {
            if(!vis[nbr])
            {
                int distOfChild = dfs(nbr,graph,vis);

                if(distOfChild>highest)
                {
                    secondHighest=highest;
                    highest=distOfChild;
                }
                else if(distOfChild>secondHighest)
                    secondHighest = distOfChild;

                maxDist = Math.max(maxDist,(highest+secondHighest));
            }
        }
        return highest+1; //highest path length+1 for current node, return as distance
    }
}
