/* Q3. Another BFS

Problem Description

Given a weighted undirected graph having A nodes, a source node C and destination node D.

Find the shortest distance from C to D and if it is impossible to reach node D from C then return -1.

You are expected to do it in Time Complexity of O(A + M).

Note:

There are no self-loops in the graph.

No multiple edges between two pair of vertices.

The graph may or may not be connected.

Nodes are Numbered from 0 to A-1.

Your solution will run on multiple testcases. If you are using global variables make sure to clear them.



Problem Constraints

1 <= A <= 105

0 <= B[i][0], B[i][1] < A

1 <= B[i][2] <= 2

0 <= C < A

0 <= D < A



Input Format

The first argument given is an integer A, representing the number of nodes.

The second argument given is the matrix B, where B[i][0] and B[i][1] are connected through an edge of weight B[i][2].

The third argument given is an integer C, representing the source node.

The fourth argument is an integer D, representing the destination node.

Note: B[i][2] will be either 1 or 2.



Output Format

Return the shortest distance from C to D. If it is impossible to reach node D from C then return -1.



Example Input

Input 1:

 
A = 6
B = [   [2, 5, 1]
        [1, 3, 1] 
        [0, 5, 2] 
        [0, 2, 2] 
        [1, 4, 1] 
        [0, 1, 1] ] 
C = 3
D = 2
Input 2:

A = 2
B = [   [0, 1, 1]
    ] 
C = 0
D = 1


Example Output

Output 1:

 4
Output 2:

 1


Example Explanation

Explanation 1:

The path to be followed will be:
    3 -> 1 (Edge weight : 1)
    1 -> 0 (Edge weight : 1)
    0 -> 2 (Edge weight : 2)
Total length of path = 1 + 1 + 2 = 4.
Explanation 2:

 Path will be 0-> 1. */

public class Solution {
    /* BFS can be use for finding shortest path between destination and source by modifying the original graph.
A bfs would work if all edges have same weight.
So for each edge of weight 2 insert a dummy node between them.
After modifying the graph you can apply bfs to find the shortest path from source to destination in O(A+M) time because all edges have same weight now. */

    public int solve(int A, int[][] B, int C, int D) {
        if(C==D)
            return 0;
        // create undirected graph
        int len=Math.max(A,B.length);
        ArrayList<Integer>[] graph = new ArrayList[2*len];
        for(int i=0;i<2*len;i++)
        {
            graph[i]=new ArrayList<>();
        }
        for(int i=0;i<B.length;i++)
        {
            if(B[i][2]==2) //if weight is 2 then add a dummy node within src and dest
            {
                graph[B[i][0]].add(A+i);
                graph[A+i].add(B[i][0]);

                graph[B[i][1]].add(A+i);
                graph[A+i].add(B[i][1]);
            }
            else
            {
                graph[B[i][0]].add(B[i][1]);
                graph[B[i][1]].add(B[i][0]);                                                
            }
        }

        // System.out.println(Arrays.toString(graph));
        // apply Djikstra algo, when reached D, return the distance otherwise return -1
        int[] dist = new int[2*len];
        Arrays.fill(dist,-1);

        Queue<Integer> q=new LinkedList<>();
        q.add(C);
        dist[C]=0;
        // int total=0;

        while(q.size()>0)
        {
            // System.out.println(Arrays.toString(dist));
            // System.out.println("Q"+q);
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                int node=q.remove();
                int currwgt = dist[node];
                for(int nbr:graph[node])
                {
                    // System.out.println("nbr"+nbr);
                    if(dist[nbr]==-1)
                    {
                        q.add(nbr);
                        dist[nbr]=currwgt+1;
                        if(nbr==D)
                            return dist[nbr];
                    }    
                }
            }
        }
        return -1;
    }
}
