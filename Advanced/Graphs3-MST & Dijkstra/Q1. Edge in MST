/* Q1. Edge in MST

Problem Description

Given a undirected weighted graph with A nodes labelled from 1 to A with M edges given in a form of 2D-matrix B of size M * 3 where B[i][0] and B[i][1] denotes the two nodes connected by an edge of weight B[i][2].

For each edge check whether it belongs to any of the possible minimum spanning tree or not , return 1 if it belongs else return 0.

Return an one-dimensional binary array of size M denoting answer for each edge.

NOTE:

The graph may be disconnected in that case consider mst for each component.
No self-loops and no multiple edges present.
Answers in output array must be in order with the input array B output[i] must denote the answer of edge B[i][0] to B[i][1].


Problem Constraints

1 <= A, M <= 3*105

1 <= B[i][0], B[i][1] <= A

1 <= B[i][1] <= 103



Input Format

The first argument given is an integer A representing the number of nodes in the graph.

The second argument given is an matrix B of size M x 3 which represents the M edges such that there is a edge between node B[i][0] and node B[i][1] with weight B[i][2].



Output Format

Return an one-dimensional binary array of size M denoting answer for each edge.



Example Input

Input 1:

 A = 3
 B = [ [1, 2, 2]
       [1, 3, 2]
       [2, 3, 3]
     ]


Example Output

Output 1:

 [1, 1, 0]


Example Explanation

Explanation 1:

 Edge (1, 2) with weight 2 is included in the MST           1
                                                          /   \
                                                         2     3
 Edge (1, 3) with weight 2 is included in the same MST mentioned above.
 Edge (2,3) with weight 3 cannot be included in any of the mst possible.
 So we will return [1, 1, 0]
*/

// Kruskal's Algo is used to connect the Graph based on min weighted edges, if there are 2 edges with same weight, both are possible paths.
// Apply Kruskal's Algo, and sort by weight as well as 1 of the point is weight are same
// If 2 edges are same, and weights are same, if 1 is present in minimum spanning tree, the other is also can be a possibility
public class Solution {
    public int[] solve(int A, int[][] B) {
        // use an hashMap to store the indexes to maintain the sequence
        HashMap<String,Integer> map = new HashMap<>();
        int n=B.length;
        for(int i=0;i<n;i++)
        {
            String s=Arrays.toString(B[i]);
            map.put(s,i);
        }
        
        // Kruskal's algo, sort the edges by weight, apply DSU
        Arrays.sort(B,new Comparator<int[]>(){
            @Override
            public int compare(int[] a,int[] b)
            {
                if(a[2]==b[2])
                    return a[0]-b[0];
                return a[2]-b[2];
            }
        });

        // System.out.println(Arrays.deepToString(B));
        
        int[] ans = new int[n];
        int[] par = new int[A+1];
        for(int i=0;i<=A;i++)
            par[i]=i;

        int i=0;
        while(i<n)
        {
            int j = i;

            while(j<n && B[i][2]==B[j][2])
            {   
                int x=root(B[j][0],par);
                int y=root(B[j][1],par); 
                if(x!=y)
                {
                    String s=Arrays.toString(B[j]);
                    ans[map.get(s)]=1;
                }
                j++;
            }

            j=i;
            while(j<n && B[i][2]==B[j][2])
            {   
                int x=root(B[j][0],par);
                int y=root(B[j][1],par); 
                if(x!=y)
                {
                    par[x]=y;
                }
                j++;
            }
            i=j;
        }
        return ans;
    }

    public int root(int node,int[] par)
    {
        if(par[node]==node)
            return node;
        
        int r = root(par[node],par);
        par[node]=r;
        return r;
    }
}
