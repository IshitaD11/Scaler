/* Q1. Construction Cost

Problem Description
Given a graph with A nodes and C weighted edges. Cost of constructing the graph is the sum of weights of all the edges in the graph.

Find the minimum cost of constructing the graph by selecting some given edges such that we can reach every other node from the 1st node.

NOTE: Return the answer modulo 109+7 as the answer can be large.



Problem Constraints
1 <= A <= 100000
0 <= C <= 100000
1 <= B[i][0], B[i][1] <= N
1 <= B[i][2] <= 109



Input Format
First argument is an integer A.
Second argument is a 2-D integer array B of size C*3 denoting edges. B[i][0] and B[i][1] are connected by ith edge with weight B[i][2]



Output Format
Return an integer denoting the minimum construction cost.



Example Input
Input 1:

A = 3
B = [   [1, 2, 14]
        [2, 3, 7]
        [3, 1, 2]   ]
Input 2:

A = 3
B = [   [1, 2, 20]
        [2, 3, 17]  ]


Example Output
Output 1:

9
Output 2:

37


Example Explanation
Explanation 1:

We can take only two edges (2 -> 3 and 3 -> 1) to construct the graph. 
we can reach the 1st node from 2nd and 3rd node using only these two edges.
So, the total cost of costruction is 9.
Explanation 2:

We have to take both the given edges so that we can reach the 1st node from 2nd and 3rd node. */

public class Solution {
    public class Pair
    {
        int node;
        int weight;
        Pair(int n,int w)
        {
            node=n;
            weight=w;
        }
    }
    public int solve(int A, int[][] B) {
        // generate the graph, add neighbours as Pair of node and wight between source and nbr path
        ArrayList<Pair>[] graph = new ArrayList[A+1];
        for(int i=0;i<=A;i++)
        {
            graph[i]=new ArrayList<>();
        }

        for(int i=0;i<B.length;i++)
        {
            graph[B[i][0]].add(new Pair(B[i][1],B[i][2]));
            graph[B[i][1]].add(new Pair(B[i][0],B[i][2]));
        }

        // Prims algo, create Priority queue, add nbrs to pq, remove minimum weighted nbr path
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b) -> a.weight-b.weight);
        long minCost=0;
        long mod = 1000000007;
        boolean[] vis = new boolean[A+1];
        // start from 1st node, mark 1st node as visited and add it's nbr to pq
        vis[1]=true;
        for(Pair nbr:graph[1])
        {
            if(vis[nbr.node]==false)
                pq.add(nbr);
        }

        // pick min wgts from pq and add to minCost
        while(pq.size()>0)
        {
            Pair curr = pq.remove();
            if(vis[curr.node]==false)
            {
                vis[curr.node]=true;
                minCost= (minCost + (long)curr.weight)%mod;

                for(Pair nbr:graph[curr.node])
                {
                    if(vis[nbr.node]==false)
                        pq.add(nbr);
                }
            }
        }
        return (int)(minCost%mod);
    }
}
