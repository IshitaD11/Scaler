/* Q2. Morris Inorder Traversal

Problem Description
Given a binary tree, return the inorder traversal of its nodes' values.

NOTE: Using recursion and stack are not allowed.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return an integer array denoting the inorder traversal of the given binary tree.



Example Input
Input 1:

   1
    \
     2
    /
   3
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [1, 3, 2]
Output 2:

 [6, 1, 3, 2]


Example Explanation
Explanation 1:

 The Inorder Traversal of the given tree is [1, 3, 2].
Explanation 2:

 The Inorder Traversal of the given tree is [6, 1, 3, 2]. */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> solve(TreeNode A) {
        ArrayList<Integer> inorder = new ArrayList<>();

        TreeNode curr = A;

        while(curr!=null)
        {
            // if no left tree, add data to ans
            if(curr.left==null)
            {
                inorder.add(curr.val);
                curr=curr.right;
            }
            // left tree present, traver the left tree, connect right most of each branch to it's parent
            else
            {
                // for both first and 2nd time traversal, go to right most branch
                TreeNode tmp = curr.left;
                while(tmp.right!=null && tmp.right!=curr)
                {
                    tmp=tmp.right;
                }
                // first time traversal, make the connection
                if(tmp.right==null)
                {
                    tmp.right=curr;
                    curr=curr.left;
                }
                // 2nd time traversal, add data to list, also break connection create
                else
                {
                    tmp.right=null;
                    inorder.add(curr.val);
                    curr=curr.right;
                }
            }            
        }
        return inorder;
    }
}
