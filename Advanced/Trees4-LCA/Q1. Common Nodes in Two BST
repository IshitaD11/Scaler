/* Q1. Common Nodes in Two BST

Problem Description
Given two BST's A and B, return the (sum of all common nodes in both A and B) % (109 +7) .

In case there is no common node, return 0.

NOTE:

Try to do it one pass through the trees.



Problem Constraints
1 <= Number of nodes in the tree A and B <= 105

1 <= Node values <= 106



Input Format
First argument represents the root of BST A.

Second argument represents the root of BST B.



Output Format
Return an integer denoting the (sum of all common nodes in both BST's A and B) % (109 +7) .



Example Input
Input 1:

 Tree A:
    5
   / \
  2   8
   \   \
    3   15
        /
        9

 Tree B:
    7
   / \
  1  10
   \   \
    2  15
       /
      11
Input 2:

  Tree A:
    7
   / \
  1   10
   \   \
    2   15
        /
       11

 Tree B:
    7
   / \
  1  10
   \   \
    2  15
       /
      11


Example Output
Output 1:

 17
Output 2:

 46

Example Explanation
Explanation 1:

 Common Nodes are : 2, 15
 So answer is 2 + 15 = 17
Explanation 2:

 Common Nodes are : 7, 2, 1, 10, 15, 11
 So answer is 7 + 2 + 1 + 10 + 15 + 11 = 46 */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
// iterative inorder traversal using a stack -->
// Add to stack till A.left exists, we need the leftmost node in top of stack
// pop the top of stack, print value and go to right of the node
// In here we will be merging inorder traversal of two stacks

public class Solution {
    public int solve(TreeNode A, TreeNode B) {
        Stack<TreeNode> stkA = new Stack<>();
        Stack<TreeNode> stkB = new Stack<>();

        long mod=1000000007;
        long sum=0;
        TreeNode currA=A;
        TreeNode currB=B;

        while(true)
        {
            while(currA!=null)
            {
                stkA.push(currA);
                currA=currA.left;
            }
            while(currB!=null)
            {
                stkB.push(currB);
                currB=currB.left;
            }

            if(stkA.isEmpty() || stkB.isEmpty()) //below peek/pop will fail is any stk is empty
                break;

            TreeNode topA=stkA.peek();
            TreeNode topB=stkB.peek();

            if(topA.val==topB.val)
            {
                sum+=topA.val;
                stkA.pop();
                stkB.pop();
                currA=topA.right;
                currB=topB.right;
            }   
            else if(topA.val<topB.val) //traverse A further
            {
                stkA.pop();
                currA=topA.right;
            }
            else //B value is less, traverse B further
            {
                stkB.pop();
                currB=topB.right;
            }
        }
        return (int)(sum%mod);
    }
}
