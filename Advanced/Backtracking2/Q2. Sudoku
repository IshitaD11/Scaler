/* Q2. Sudoku

Problem Description
Write a program to solve a Sudoku puzzle by filling the empty cells. Empty cells are indicated by the character '.' You may assume that there will be only one unique solution.



A sudoku puzzle,



and its solution numbers marked in red.



Problem Constraints
N = 9


Input Format
First argument is an array of array of characters representing the Sudoku puzzle.


Output Format
Modify the given input to the required answer.


Example Input
Input 1:

A = [[53..7....], [6..195...], [.98....6.], [8...6...3], [4..8.3..1], [7...2...6], [.6....28.], [...419..5], [....8..79]]


Example Output
Output 1:

[[534678912], [672195348], [198342567], [859761423], [426853791], [713924856], [961537284], [287419635], [345286179]]


Example Explanation
Explanation 1:

Look at the diagrams given in the question. */

import java.util.*;

public class Solution {
	public void solveSudoku(char[][] A) {
        sudokuSolver(A,0,0);
	}

    public boolean sudokuSolver(char[][] mat,int row,int col)
    {
        if(col==9)
        {
            row=row+1;
            col=0;
        }    
        if(row==9)
            return true;
        
        // if number is present, check the next value
        if(mat[row][col]!='.')
        {
            if(sudokuSolver(mat,row,col+1)==true)
                return true;
        }
        else // if number is not present, check all possible answers from 1 to 9
        {
            for(char num='1';num<='9';num++)
            {
                if(isValidSudoku(mat,row,col,num))
                {
                    mat[row][col]=num;
                    if(sudokuSolver(mat,row,col+1)==true)
                        return true;
                    mat[row][col]='.';
                }
            }
        }
        return false;
    }

    public boolean isValidSudoku(char[][] mat,int row,int col,char x)
    {
        // check in the row and col
        for(int i=0;i<9;i++)
        {
            if(mat[row][i]==x || mat[i][col]==x)
                return false;
        }

        // check in the box, find box starting point, starting points are always multiple of 3
        row=row-(row%3);
        col=col-(col%3);
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(mat[row+i][col+j]==x)
                    return false;
            }
        }
        return true;
    }
}
