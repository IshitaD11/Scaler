/* Q1. NQueens

Problem Description
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer A, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
The final list should be generated in such a way that the indices of the queens in each list should be in reverse lexicographical order.


Problem Constraints
1 <= A <= 10



Input Format
First argument is an integer n denoting the size of chessboard



Output Format
Return an array consisting of all distinct solutions in which each element is a 2d char array representing a unique solution.



Example Input
Input 1:

A = 4
Input 2:

A = 1


Example Output
Output 1:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Output 1:

[
 [Q]
]


Example Explanation
Explanation 1:

There exist only two distinct solutions to the 4-queens puzzle:
Explanation 1:

There exist only one distinct solutions to the 1-queens puzzle: */

// TC:O(n*n!) SC:O(n^2)
public class Solution {
	public ArrayList<ArrayList<String>> solveNQueens(int A) {

        char[][] board = new char[A][A]; //board to place queens

        for(int i=0;i<A;i++)
            Arrays.fill(board[i],'.');

        ArrayList<ArrayList<String>> ans = new ArrayList<>();

        NQueens(board,0,ans); 
        return ans;
	}

    // recursive function
    public void NQueens(char[][] board,int idx,ArrayList<ArrayList<String>> ans)
    {
        // breaking condition, when idx reaches after last row, my board has already placed all queens
        if(idx==board.length)
        {
            ans.add(charArrToStr(board)); //conver the char[][] board to STring Array
            return;
        }

        // check if possible to place in each col of idx row 
        for(int j=0;j<board.length;j++)
        {
            if(isPossibleToPlaceQ(board,idx,j))
            {
                // place Q in jth col, and check for the possibility to place next Q in next rows
                board[idx][j]='Q';
                NQueens(board,idx+1,ans); 
                board[idx][j]='.'; //backtrack
            }
        }
    }

    // as per answer requirement, change each row to string and add it to String array, which will be added to ans
    public ArrayList<String> charArrToStr(char[][] board)
    {
        ArrayList<String> str = new ArrayList<String>();
        for(int i=0;i<board.length;i++)
        {
            String eachRow = new String(board[i]);
            str.add(eachRow);
        }
        return str;
    }

    // check is it is possible to place queen at board[row][col] position 
    public boolean isPossibleToPlaceQ(char[][] board,int row,int col)
    {
        // check the col, if we already have Q in prev rows
        for(int i=row-1;i>=0;i--)
        {
            if(board[i][col]=='Q')
                return false;
        }

        // check diagonal
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--)
        {
            if(board[i][j]=='Q')
                return false;
        }

        // check antidiagonal, col increase, row decrease
        for(int i=row-1,j=col+1;i>=0 && j<board.length;i--,j++)
        {
            if(board[i][j]=='Q')
                return false;
        }
        return true;
    }
}
