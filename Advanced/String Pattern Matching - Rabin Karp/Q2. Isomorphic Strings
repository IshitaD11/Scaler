/* Q2. Isomorphic Strings

Problem Description
Given two strings A and B, determine if they are isomorphic.

A and B are called isomorphic strings if all occurrences of each character in A can be replaced with another character to get B and vice-versa.



Problem Constraints
1 <= |A| <= 100000

1 <= |B| <= 100000

A and B contain only lowercase characters.



Input Format
The first Argument is string A.

The second Argument is string B.



Output Format
Return 1 if strings are isomorphic, 0 otherwise.



Example Input
Input 1:

A = "aba"
B = "xyx"
Input 2:

A = "cvv"
B = "xyx"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 Replace 'a' with 'x', 'b' with 'y'.
Explanation 2:

 A cannot be converted to B. */

/*Take 1 hashMap for maping between A and B each characters, and a SetB to store unique chars of B
Characters of A is key, and characters of B is value. So to identify unique combination of B, use a hashSet.
Now iterate on A, if A[i] present in map, check is value = B[i], if not return false
if A[i] not present in map, check B[i] already present in set. i.e. B[i] already mapped to some other char of A[i], return 0.
otherwise, add A[i],B[i] to map, and B[i] to set
*/

public class Solution {
    public int solve(String A, String B) {
        HashMap<Character,Character> map = new HashMap<Character,Character>();
        HashSet<Character> setB = new HashSet<Character>();

        int lenA=A.length();
        int lenB=B.length();

        if(lenA!=lenB)
            return 0;

        for(int i=0;i<lenA;i++)
        {
            if(map.containsKey(A.charAt(i)))
            {
                if(map.get(A.charAt(i))!=B.charAt(i))
                    return 0;
            }
            else
            {
                if(setB.contains(B.charAt(i)))
                    return 0;
                map.put(A.charAt(i),B.charAt(i));
                setB.add(B.charAt(i));
            }
        }
        return 1;
    }
}
