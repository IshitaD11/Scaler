/* Q2. Permutations of A in B

Problem Description
You are given two strings, A and B, of size N and M, respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.



Problem Constraints
1 <= N < M <= 105



Input Format
Given two arguments, A and B of type String.



Output Format
Return a single integer, i.e., number of permutations of A present in B as a substring.



Example Input
Input 1:

 A = "abc"
 B = "abcbacabc"
Input 2:

 A = "aca"
 B = "acaa"


Example Output
Output 1:

 5
Output 2:

 2


Example Explanation
Explanation 1:

 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:

 Permutations of A that are present in B as substring are:
    1. aca
    2. caa  */

public class Solution {
    public int solve(String A, String B) {
        int lenA=A.length();
        int lenB=B.length();

        if(lenA>lenB)
            return 0;

        // create freq array of B and same length first window of A
        int[] freqB = new int[26];
        int[] freqA = new int[26];
        for(int i=0;i<lenA;i++)
        {
            freqB[B.charAt(i)-'a']++;
            freqA[A.charAt(i)-'a']++;
        }
        int count = 0;

        if(isEqual(freqA,freqB))
            count++;

        int st = 1;
        int en = lenA;

        while(en<lenB)
        {
            freqB[B.charAt(st-1)-'a']--;  //prev char
            freqB[B.charAt(en)-'a']++; //next char
            if(isEqual(freqA,freqB))
                count++;
            st++;en++;
        }
        return count;
    }

    public boolean isEqual(int[] freqA,int[] freqB)
    {
        for(int i=0;i<26;i++)
        {
            if(freqA[i]>0)
            {
                if(freqB[i]!=freqA[i])
                    return false;
            }
        }
        return true;
    }
}
