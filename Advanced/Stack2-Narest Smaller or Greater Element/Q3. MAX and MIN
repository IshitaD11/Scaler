/* Q3. MAX and MIN

Problem Description
Given an array of integers A.

The value of an array is computed as the difference between the maximum element in the array and the minimum element in the array A.

Calculate and return the sum of values of all possible subarrays of A modulo 109+7.



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 1000000



Input Format
The first and only argument given is the integer array A.



Output Format
Return the sum of values of all possible subarrays of A modulo 109+7.



Example Input
Input 1:

 A = [1]
Input 2:

 A = [4, 7, 3, 8]


Example Output
Output 1:

 0
Output 2:

 26


Example Explanation
Explanation 1:

Only 1 subarray exists. Its value is 0.
Explanation 2:

value ( [4] ) = 4 - 4 = 0
value ( [7] ) = 7 - 7 = 0
value ( [3] ) = 3 - 3 = 0
value ( [8] ) = 8 - 8 = 0
value ( [4, 7] ) = 7 - 4 = 3
value ( [7, 3] ) = 7 - 3 = 4
value ( [3, 8] ) = 8 - 3 = 5
value ( [4, 7, 3] ) = 7 - 3 = 4
value ( [7, 3, 8] ) = 8 - 3 = 5
value ( [4, 7, 3, 8] ) = 8 - 3 = 5
sum of values % 10^9+7 = 26 */

/*Contribution Technique: for single element --> 
A[i] = (no of subarrays where A[i] is max - no of subarrays where A[i] min)
no of subarrays where A[i] is max = (dist of nearest right max from i) * (dist of nearest left max from i)
                                  = (rightMax[i]-i)*(i-leftMax[i])
no of subarrays where A[i] min = (dist of nearest right min from i) * (dist of nearest left min from i)
                                = (rightMin[i]-i)*(i-leftMin[i])                                 
4 arrays to be created, leftMax,leftMin, rightMax,rightMin
*/

public class Solution {
    public int solve(int[] A) {
        int n=A.length;
        // create an array to store the nearest min element of A[i] at left
        int[] leftMin = new int[n];
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0;i<n;i++)
        {
            while(stack.size()!=0 && A[stack.peek()]>=A[i])
                stack.pop();
            if(stack.size()==0)
                leftMin[i]=-1;
            else
                leftMin[i]=stack.peek();    
            stack.push(i);
        }
        // create an array to store the nearest max element of A[i] at left
        int[] leftMax = new int[n];
        stack = new Stack<Integer>();
        for(int i=0;i<n;i++)
        {
            while(stack.size()!=0 && A[stack.peek()]<=A[i])
                stack.pop();
            if(stack.size()==0)
                leftMax[i]=-1;
            else
                leftMax[i]=stack.peek();    
            stack.push(i);
        }
        // create an array to store the nearest max element of A[i] at right
        int[] rightMax = new int[n];
        stack = new Stack<Integer>();
        for(int i=n-1;i>=0;i--)
        {
            while(stack.size()!=0 && A[stack.peek()]<=A[i])
                stack.pop();
            if(stack.size()==0)
                rightMax[i]=n;
            else
                rightMax[i]=stack.peek();    
            stack.push(i);
        }
        // create an array to store the nearest min element of A[i] at right
        int[] rightMin = new int[n];
        stack = new Stack<Integer>();
        for(int i=n-1;i>=0;i--)
        {
            while(stack.size()!=0 && A[stack.peek()]>=A[i])
                stack.pop();
            if(stack.size()==0)
                rightMin[i]=n;
            else
                rightMin[i]=stack.peek();    
            stack.push(i);
        }
        // use contribution to get ans
        long ans=0;
        long mod=1000000007;
        for(int i=0;i<n;i++)
        {
            long max = ((long)(rightMax[i]-i)*(long)(i-leftMax[i]))%mod;
            long min = ((long)(rightMin[i]-i)*(long)(i-leftMin[i]))%mod;
            ans = (ans+(A[i]*(max-min+mod)%mod)%mod)%mod;
        }
        return (int)(ans%mod);
    }
}
