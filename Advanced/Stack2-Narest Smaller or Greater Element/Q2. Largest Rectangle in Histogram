/* Q2. Largest Rectangle in Histogram

Problem Description
Given an array of integers A.

A represents a histogram i.e A[i] denotes the height of the ith histogram's bar. Width of each bar is 1.

Find the area of the largest rectangle formed by the histogram.



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 10000



Input Format
The only argument given is the integer array A.



Output Format
Return the area of the largest rectangle in the histogram.



Example Input
Input 1:

 A = [2, 1, 5, 6, 2, 3]
Input 2:

 A = [2]


Example Output
Output 1:

 10
Output 2:

 2


Example Explanation
Explanation 1:

The largest rectangle has area = 10 unit. Formed by A[3] to A[4].
Explanation 2:

Largest rectangle has area 2. */

public class Solution {
    public int largestRectangleArea(int[] A) {
        int n=A.length;
        // create an array to store the nearest min element of A[i] at left
        int[] leftMin = new int[n];
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0;i<n;i++)
        {
            while(stack.size()!=0 && A[stack.peek()]>=A[i])
                stack.pop();
            if(stack.size()==0)
                leftMin[i]=-1;
            else
                leftMin[i]=stack.peek();    
            stack.push(i);
        }
        // System.out.println(Arrays.toString(leftMin));

        // create an array to store the nearest min element of A[i] at right
        int[] rightMin = new int[n];
        stack=new Stack<Integer>();
        for(int i=n-1;i>=0;i--)
        {
            while(stack.size()!=0 && A[stack.peek()]>=A[i])
                stack.pop();
            if(stack.size()==0)
                rightMin[i]=n;
            else
                rightMin[i]=stack.peek();    
            stack.push(i);
        }

        // System.out.println(Arrays.toString(rightMin));

        // using the two arrays, calculate the max area of rectangle
        // height = A[i] , width => p1=leftmin index, p2=rightmin index. Width to be calculated excluding P1 and p2
        // width = (p2-1) - (p1+1) + 1 = p2-p1-1
        int maxArea=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            int ht=A[i];
            int wd = rightMin[i]-leftMin[i]-1;
            int area = ht*wd;
            maxArea = Math.max(area,maxArea);
        }
        return maxArea;
    }
}
