/* Q4. Max Sum Without Adjacent Elements

Problem Description
Given a 2 x N grid of integers, A, your task is to choose numbers from the grid such that sum of these numbers is maximized. 
However, you cannot choose two numbers that are adjacent horizontally, vertically, or diagonally. 

Return the maximum possible sum.

Note: You are allowed to choose more than 2 numbers from the grid.


Problem Constraints
1 <= N <= 20000
1 <= A[i] <= 2000


Input Format
The first and the only argument of input contains a 2d matrix, A.


Output Format
Return an integer, representing the maximum possible sum.


Example Input
Input 1:

 A = [   
        [1]
        [2]    
     ]
Input 2:

 A = [   
        [1, 2, 3, 4]
        [2, 3, 4, 5]    
     ]


Example Output
Output 1:

 2
Output 2:

 8


Example Explanation
Explanation 1:

 We will choose 2 (From 2nd row 1st column).
Explanation 2:

 We will choose 3 (From 2nd row 2nd column) and 5 (From 2nd row 4th column). */

/*look for different possible solutions: DP, Maximum sum:Greedy
There are 2 rows and in each column we can select only 1 element. 
So make the selecting to array, by taking maximum element in each column*/


public class Solution {
    public int adjacent(int[][] A) {
        int[] max = new int[A[0].length];

        for(int j=0;j<A[0].length;j++)
        {
            max[j]=Math.max(A[0][j],A[1][j]);
        }

        if(A[0].length==1)
            return max[0];
        // find the max possible selection Greedily, 2 adjacent elemnets cant be selected
        max[1]=Math.max(max[0],max[1]);
        for(int i=2;i<A[0].length;i++)
        {
            max[i]=Math.max((max[i-2]+max[i]),max[i-1]);  
        }
        return max[max.length-1];        
    }
}
