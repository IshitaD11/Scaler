/* Q3. Ways to Decode

Problem Description
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message denoted by string A containing digits, determine the total number of ways to decode it modulo 109 + 7.



Problem Constraints
1 <= length(A) <= 105



Input Format
The first and the only argument is a string A.



Output Format
Return an integer, representing the number of ways to decode the string modulo 109 + 7.



Example Input
Input 1:

 A = "12"
Input 2:

 A = "8"


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 Given encoded message "12", it could be decoded as "AB" (1, 2) or "L" (12).
 The number of ways decoding "12" is 2.
Explanation 2:

 Given encoded message "8", it could be decoded as only "H" (8).
 The number of ways decoding "8" is 1. */

// we have to take either 1 char or 2 chars. if A[i] between 1 to 9, we can take A[i].
// also if A[i-1] is 1, doesnot matter A[i], it can be 2 chars, if A[i-1] is 2 then A[i] can be within 0 to 6
// dp[i]=no of ways to decode till A[i]. if A[i-1] is 1/2 then dp[i]=dp[i-2]+1 (Taking 2 chars and adding to ways)
// also I can add d[i]+=1 if A[i] is within 1 to 9


public class Solution {
    public int numDecodings(String A) {
        long mod = 1000000007;
        if(A.charAt(0)=='0')
            return 0;
        long[] dp = new long[A.length()+1];
        dp[0]=1; //no characters, 1 way to decode, no decoding done
        dp[1]=1; //1 character, decode 1 way

        for(int i=1;i<A.length();i++)
        {
            //can take 2 chars
            if(A.charAt(i-1)=='1') 
                dp[i+1]=dp[i-1];
            else if(A.charAt(i-1)=='2' && A.charAt(i)>='1' && A.charAt(i)<='6')
                dp[i+1]=dp[i-1];
            
            // take possibility of 1 chars
            if(A.charAt(i)>='1' && A.charAt(i)<='9')
                dp[i+1]=(dp[i+1]+dp[i])%mod;
        } 
        return (int)(dp[A.length()]%mod);
    }
}
