/* Q2. Max Product Subarray

Problem Description
Given an integer array A of size N. Find the contiguous subarray within the given array (containing at least one number) which has the largest product.

Return an integer corresponding to the maximum product possible.

NOTE: Answer will fit in 32-bit integer value.



Problem Constraints
1 <= N <= 5 * 105

-100 <= A[i] <= 100



Input Format
First and only argument is an integer array A.



Output Format
Return an integer corresponding to the maximum product possible.



Example Input
Input 1:

 A = [4, 2, -5, 1]
Input 2:

 A = [-3, 0, -5, 0]


Example Output
Output 1:

 8
Output 2:

 0


Example Explanation
Explanation 1:

 We can choose the subarray [4, 2] such that the maximum product is 8.
Explanation 2:

 0 will be the maximum product possible. */

// If all numbers are positive then taking prod of all will give me max. Now if I have 0 and pos, we can reset the subarray at 0 element.
// But when we have both + and - elements, then neg*neg will give me pos, but only 1 neg will be low value. So need to check both pos and neg value of the product, multiply with A[i] and store the min and max at 2 dp array
// ans would be max of value got in each step
// TC:O(n) SC:O(n)
public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maxProduct(final List<Integer> A) {
        int[] dpmin = new int[A.size()+1];
        int[] dpmax = new int[A.size()+1];
        
        dpmin[0]=1;
        dpmax[0]=1;

        int ans=Integer.MIN_VALUE;
        for(int i=1;i<=A.size();i++)
        {
            dpmin[i] = Math.min(A.get(i-1),Math.min(dpmin[i-1]*A.get(i-1),dpmax[i-1]*A.get(i-1)));
            dpmax[i] = Math.max(A.get(i-1),Math.max(dpmin[i-1]*A.get(i-1),dpmax[i-1]*A.get(i-1)));
            ans=Math.max(ans,dpmax[i]);
        }
        return ans;
    }
}
