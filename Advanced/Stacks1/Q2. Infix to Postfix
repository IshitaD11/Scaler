/* Q2. Infix to Postfix

Problem Description
Given string A denoting an infix expression. Convert the infix expression into a postfix expression.

String A consists of ^, /, *, +, -, (, ) and lowercase English alphabets where lowercase English alphabets are operands and ^, /, *, +, - are operators.

Find and return the postfix expression of A.

NOTE:

^ has the highest precedence.
/ and * have equal precedence but greater than + and -.
+ and - have equal precedence and lowest precedence among given operators.


Problem Constraints
1 <= length of the string <= 500000



Input Format
The only argument given is string A.



Output Format
Return a string denoting the postfix conversion of A.



Example Input
Input 1:

 A = "x^y/(a*z)+b"
Input 2:

 A = "a+b*(c^d-e)^(f+g*h)-i"


Example Output
Output 1:

 "xy^az*/b+"
Output 2:

 "abcd^e-fgh*+^*+i-"


Example Explanation
Explanation 1:

 Ouput dentotes the postfix expression of the given input. */

public class Solution {
    // priority function
    public int priority(String op)
    {
        if(op.equals("+")||op.equals("-"))
            return 1;
        else if(op.equals("*")||op.equals("/"))
            return 2;
        else if(op.equals("^"))
            return 3;
        else 
            return 0; //for non operators
    }
    
    public String solve(String A) {
        // two stacks, 1 to store operators and 1 to store operands or the answers
        Stack<String> operator = new Stack<String>();
        Stack<String> result = new Stack<String>();

        for(int i=0;i<A.length();i++)
        {
            String curr=A.charAt(i)+"";
            if(curr.equals("("))
                operator.push(curr);
            else if(curr.equals(")"))
            {
                // resolve until '(' is found
                while(!operator.peek().equals("("))
                {
                    String op = operator.pop();
                    String b = result.pop();
                    String a = result.pop();
                    result.push(a+b+op);
                }
                // pop the '(' as the inner characters of () are resolved
                operator.pop();
            }
            else if(priority(curr)>0) //operator
            {
                while(operator.size()>0 && !operator.peek().equals("(") && priority(operator.peek())>=priority(curr))
                {
                    // resolve the equation
                    String op = operator.pop();
                    String b = result.pop();
                    String a = result.pop();
                    result.push(a+b+op);
                }

                if(operator.size()==0 || priority(operator.peek())<priority(curr)|| operator.peek().equals("("))
                {
                    operator.push(curr);
                }
            }
            else //operand
                result.push(curr);
        }

        //if stack not empty, resolve the remaining
        while(operator.size()>0)
        {
            // resolve the equation
            String op = operator.pop();
            String b = result.pop();
            String a = result.pop();
            result.push(a+b+op);
        }
        
        return result.peek();
    }
}
