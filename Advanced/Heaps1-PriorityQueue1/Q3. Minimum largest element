/* Q3. Minimum largest element

Problem Description
Given an array A of N numbers, you have to perform B operations. In each operation, you have to pick any one of the N elements and add the original value(value stored at the index before we did any operations) to its current value. You can choose any of the N elements in each operation.

Perform B operations in such a way that the largest element of the modified array(after B operations) is minimized.
Find the minimum possible largest element after B operations.



Problem Constraints
1 <= N <= 106
0 <= B <= 105
-105 <= A[i] <= 105



Input Format
The first argument is an integer array A.
The second argument is an integer B.



Output Format
Return an integer denoting the minimum possible largest element after B operations.



Example Input
Input 1:

 A = [1, 2, 3, 4] 
 B = 3
Input 2:

 A = [5, 1, 4, 2] 
 B = 5


Example Output
Output 1:

 4
Output 2:

 5


Example Explanation
Explanation 1:

 Apply operation on element at index 0, the array would change to [2, 2, 3, 4]
 Apply operation on element at index 0, the array would change to [3, 2, 3, 4]
 Apply operation on element at index 0, the array would change to [4, 2, 3, 4]
 Minimum possible largest element after 3 operations is 4.
Explanation 2:

 Apply operation on element at index 1, the array would change to [5, 2, 4, 2]
 Apply operation on element at index 1, the array would change to [5, 3, 4, 2]
 Apply operation on element at index 1, the array would change to [5, 4, 4, 2]
 Apply operation on element at index 1, the array would change to [5, 5, 4, 2]
 Apply operation on element at index 3, the array would change to [5, 5, 4, 4]
 Minimum possible largest element after 5 operations is 5. */

// in an Pair store original and val after operation, add the Pairs to min heap. remove the min element from min heap,
// add the original value to current value, and add again in heap.
// after B operations ended, the front element is the max modified element, also check if this is maximum element of the array
public class Solution {
    public class Pair{
        int currVal;
        int originalVal;
        Pair(int curr,int ori)
        {
            currVal=curr;
            originalVal = ori;
        }
    }

    public int solve(int[] A, int B) {
        // sort the min heap by next value, so heap.peek always give the value, which will be minimum in next step
        PriorityQueue<Pair> pq = new PriorityQueue<>((Pair p,Pair q)->{
            return (p.currVal+p.originalVal)-(q.originalVal+q.currVal);
        });
        // add data into pq
        // find the max element, to compare with found values
        int max=Integer.MIN_VALUE;
        for(int i=0;i<A.length;i++)
        {
            pq.add(new Pair(A[i],A[i]));
            max=Math.max(max,A[i]);
        }

        while(B>0)
        {
            Pair min = pq.poll();
            pq.add(new Pair(min.currVal+min.originalVal,min.originalVal)) ;
            max=Math.max(max,(min.currVal+min.originalVal));
            B--;
        }
        return max;
    }
}
