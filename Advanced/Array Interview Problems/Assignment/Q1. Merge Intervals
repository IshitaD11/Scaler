/* Problem Description
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.



Problem Constraints
0 <= |intervals| <= 105



Input Format
First argument is the vector of intervals

second argument is the new interval to be merged



Output Format
Return the vector of intervals after merging



Example Input
Input 1:

Given intervals [1, 3], [6, 9] insert and merge [2, 5] .
Input 2:

Given intervals [1, 3], [6, 9] insert and merge [2, 6] .


Example Output
Output 1:

 [ [1, 5], [6, 9] ]
Output 2:

 [ [1, 9] ]


Example Explanation
Explanation 1:

(2,5) does not completely merge the given intervals
Explanation 2:

(2,6) completely merges the given intervals */

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

//  Need to check newInterval with the arraylist and merge as required. carry forward the merged interval, until next arraylist element is non overlapping.


public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {

        ArrayList<Interval> ans = new ArrayList<Interval>();

        for(int i=0;i<intervals.size();i++)
        {
            if(intervals.get(i).end < newInterval.start) //breaking point newInterval not overlapping with arrayList element
            {
                ans.add(intervals.get(i));
            }
            else
            {
                if(intervals.get(i).start > newInterval.end) //breaking point newInterval not overlapping with arrayList element
                {
                    ans.add(newInterval); // once reached the point that newInterval cannot be merged anymore, add newInterval to ans, and add remaining arrayList element to ans, as they can not be merged anymore
                    for(int j=i;j<intervals.size();j++)
                    {
                        ans.add(intervals.get(j));
                    }
                    return ans; //return as all possible elements are added
                }
                else //update the newInterval after merging
                {
                    newInterval.start = Math.min(intervals.get(i).start,newInterval.start);
                    newInterval.end = Math.max(intervals.get(i).end,newInterval.end);
                }
            }  
        }
        ans.add(newInterval); //when newInterval could be merged till the last element. just need to add the merged values
        return ans;

    }
}
