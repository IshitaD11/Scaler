/* Q1. Count of divisors

Problem Description
Given an array of integers A, find and return the count of divisors of each element of the array.

NOTE: The order of the resultant array should be the same as the input array.



Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 106



Input Format
The only argument given is the integer array A.



Output Format
Return the count of divisors of each element of the array in the form of an array.



Example Input
Input 1:

 A = [2, 3, 4, 5]
Input 2:

 A = [8, 9, 10]


Example Output
Output 1:

 [2, 2, 3, 2]
Output 1:

 [4, 3, 4]


Example Explanation
Explanation 1:

 The number of divisors of 2 : [1, 2], 3 : [1, 3], 4 : [1, 2, 4], 5 : [1, 5]
 So the count will be [2, 2, 3, 2].
Explanation 2:

 The number of divisors of 8 : [1, 2, 4, 8], 9 : [1, 3, 9], 10 : [1, 2, 5, 10]
 So the count will be [4, 3, 4]. */
 
 public class Solution {
    public int[] solve(int[] A) {

        // find the max number 
        int max=A[0];
        for(int i=0;i<A.length;i++)
        {
            max=Math.max(max,A[i]);
        }

        int[] spf = new int[max+1];
        // fill the spf array
        for(int i=0;i<spf.length;i++)
        {
            spf[i]=i;
        }

        // calculate the smallest Prime factor of each number
        for(int i=2;i*i<spf.length;i++)
        {
            if(spf[i]==i)
            {
                for(int j=i*i;j<spf.length;j=j+i)
                {
                    spf[j]=i;
                }
            }
        }

        // calculate the factor for each element of array
        int[] ans = new int[A.length];
        for(int i=0;i<A.length;i++)
        {
            int num = A[i];
            //store the prime factor and their frequency in hashmap
            HashMap<Integer,Integer> map = new HashMap<Integer,Integer>(); 
            while(num>1)
            {
                map.put(spf[num],map.getOrDefault(spf[num],0)+1);
                num=num/spf[num];
            }
            // count the factor sum
            int cnt=1;
            for(int key:map.keySet())
            {
                cnt = (map.get(key)+1)*cnt;
            }
            ans[i]=cnt;
        }
        return ans;
    }
}
