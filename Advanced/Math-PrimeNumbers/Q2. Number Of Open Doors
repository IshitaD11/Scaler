/* Q2. Number Of Open Doors

Problem Description
Given an integer A, which denotes the number of doors in a row numbered 1 to A. All the doors are closed initially.

A person moves to and fro, changing the states of the doors as follows: the person opens a door that is already closed and closes a door that is already opened.

In the first go, he/she alters the states of doors numbered 1, 2, 3, … , A.
In the second go, he/she alters the states of doors numbered 2, 4, 6 ….
In the third go, he/she alters the states of doors numbered 3, 6, 9 …
This continues till the A'th go in, which you alter the state of the door numbered A.

Find and return the number of open doors at the end of the procedure.



Problem Constraints
1 <= A <= 109



Input Format
The only argument given is integer A.



Output Format
Return the number of open doors at the end of the procedure.



Example Input
Input 1:

 A = 5
Input 2:

 A = 6


Example Output
Output 1:

 2
Output 2:

 2 


Example Explanation
Input 1:

 In the first go, he/she alters the states of doors numbered 1, 2, 3, 4, 5. Now, all doors are open.
 In the second go, he/she closes the doors numbered 2, 4.
 In the third go, he/she closes the door numbered 3.
 In the fourth go, he/she open the door numbered 4.
 In the fifth go, he/she closes the door numbered 5.
 Doors opened at the end are 1 and 4.
Input 2:

 In the first go, he/she alters the states of doors numbered 1, 2, 3, 4, 5, 6. Now, all doors are open.
 In the second go, he/she closes the doors numbered 2, 4, 6.
 In the third go, he/she closes the door numbered 3 and opens door 6.
 In the fourth go, he/she open the door numbered 4.
 In the fifth go, he/she closes the door numbered 5.
 In the sixth go, he/she closes the door numbered 6.
 Doors opened at the end are 1 and 4.  */
 
 
 public class Solution {
    public int solve(int A) {

       /* int[] spf = new int[A+1];
        // fill the spf array
        for(int i=0;i<spf.length;i++)
        {
            spf[i]=i;
        }

        // calculate the smallest Prime factor of each number
        for(int i=2;i*i<spf.length;i++)
        {
            if(spf[i]==i)
            {
                for(int j=i*i;j<spf.length;j=j+i)
                {
                    spf[j]=i;
                }
            }
        }

        // calculate the factor for each element of array
        int[] factor = new int[A+1];
        for(int i=1;i<factor.length;i++)
        {
            int num = i;
            //store the prime factor and their frequency in hashmap
            HashMap<Integer,Integer> map = new HashMap<Integer,Integer>(); 
            while(num>1)
            {
                map.put(spf[num],map.getOrDefault(spf[num],0)+1);
                num=num/spf[num];
            }
            // count the factor sum
            int cnt=1;
            for(int key:map.keySet())
            {
                cnt = (map.get(key)+1)*cnt;
            }
            factor[i]=cnt;
        }

        // check if cnt is odd or even, if odd then open, else close
        int ans=0;
        for(int i=1;i<factor.length;i++)
        {
            if(factor[i]%2!=0)
                ans++;
        }
        return ans; */

        /*Above code is correct but gives TLE, Optimsed approch is an observation, only perfect square number is having odd number of factors*/
        // find the perfect squares within 1 to sqrt(A)

        int cnt = 1; //for 1
        int num = 2;
        while(num*num<=A)
        {
            cnt++;
            num++;
        }
        return cnt;
    }
}
