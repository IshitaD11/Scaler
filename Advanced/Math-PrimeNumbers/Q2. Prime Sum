/* Q2. Prime Sum

Problem Description
Given an even number A ( greater than 2 ), return two prime numbers whose sum will be equal to the given number.

If there is more than one solution possible, return the lexicographically smaller solution.

If [a, b] is one solution with a <= b, and [c,d] is another solution with c <= d, then 
[a, b] < [c, d], If a < c OR a==c AND b < d. 
NOTE: A solution will always exist. Read Goldbach's conjecture.



Problem Constraints
4 <= A <= 2*107



Input Format
First and only argument of input is an even number A.



Output Format
Return a integer array of size 2 containing primes whose sum will be equal to given number.



Example Input
 4


Example Output
 [2, 2]


Example Explanation
 There is only 1 solution for A = 4. */


public class Solution {
    public int[] primesum(int A) {
        // use sieve to create the isPrime array
        Boolean[] isPrime = new Boolean[A+1];
        Arrays.fill(isPrime,true);
        isPrime[0]=false;
        isPrime[1]=false;
        for(int i=2;i*i<=A;i++)
        {
            if(isPrime[i]==true)
            {
                for(int j=i*i;j<=A;j=j+i)
                {
                    isPrime[j]=false;
                }
            }
        }

        // use isPrime to get the resultant primes
        // Goldbach's conjecture states that every even natural number greater than 2 is the sum of two prime numbers
        int[] sumPrimes = new int[2];
        for(int i=2;i<A;i++) 
        {
            if(isPrime[i]) // i is the 1st number which will always be less
            {
                int otherNum = A-i;
                if(isPrime[otherNum])
                {
                    sumPrimes[0] = i;
                    sumPrimes[1] = otherNum; 
                    return sumPrimes;
                }   
            }
        }
        return sumPrimes;
    }
}
