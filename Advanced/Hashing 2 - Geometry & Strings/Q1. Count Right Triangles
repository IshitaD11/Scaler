/* Q1. Count Right Triangles

Problem Description
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2D Cartesian plane.

Find and return the number of unordered triplets (i, j, k) such that (A[i], B[i]), (A[j], B[j]) and (A[k], B[k]) form a right-angled triangle with the triangle having one side parallel to the x-axis and one side parallel to the y-axis.

NOTE: The answer may be large so return the answer modulo (109 + 7).



Problem Constraints
1 <= N <= 105

0 <= A[i], B[i] <= 109



Input Format
The first argument given is an integer array A.
The second argument given is the integer array B.



Output Format
Return the number of unordered triplets that form a right angled triangle modulo (109 + 7).



Example Input
Input 1:

 A = [1, 1, 2]
 B = [1, 2, 1]
Input 2:

 A = [1, 1, 2, 3, 3]
 B = [1, 2, 1, 2, 1]


Example Output
Output 1:

 1
Output 2:

 6


Example Explanation
Explanation 1:

 All three points make a right angled triangle. So return 1.
Explanation 2:

 6 triplets which make a right angled triangle are:    (1, 1), (1, 2), (2, 1)
                                                       (1, 1), (3, 1), (1, 2)
                                                       (1, 1), (3, 1), (3, 2)
                                                       (2, 1), (3, 1), (3, 2)
                                                       (1, 1), (1, 2), (3, 2)
                                                       (1, 2), (3, 1), (3, 2) */

/*Idea 1: N^3 solution: take 3 loops for each 3 points, consider each point as i,j,k --> check x asix/y axis matches for two points
   A (1,1)  B (2,1)  --> here A and B have same y=1
   C (1,0)           --> A and C has same x = 1 
CAB creates a triangle, where A is right Angle.

Idea 2: put x1+"@"+y1 as a String in hashMap. take 2 loop to check 2 points i,j --> chcek if xi,yj or xj,yi points are present in hashmap

Idea 3: Contribution: create 2 hashMap with freq for A(x) and B(y). Iterate on the arrays and check the freq of same x and y axis.
How many triangles can form by the point: 
Total Triangle = (x count -1) * (y count - 1)

*/

public class Solution {
    public int solve(int[] A, int[] B) {
        HashMap<Integer,Integer> AFreq = new HashMap<Integer,Integer>();
        HashMap<Integer,Integer> BFreq = new HashMap<Integer,Integer>();
        int n=A.length;
        for(int i=0;i<n;i++)
        {
            AFreq.put(A[i],AFreq.getOrDefault(A[i],0)+1);
            BFreq.put(B[i],BFreq.getOrDefault(B[i],0)+1);
        }

        // iterate and count triangles with help of freq maps
        long triCnt = 0;

        for(int i=0;i<n;i++)
        {
            int xfreq = AFreq.get(A[i]);
            int yfreq = BFreq.get(B[i]);
            triCnt += (long)(xfreq-1) * (long)(yfreq-1); 
        }
        return (int)triCnt%1000000007;
    }
}
