/* Q2. Count Rectangles

Problem Description
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in a 2-D Cartesian plane.

Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a rectangle with the rectangle having all the sides parallel to either x-axis or y-axis.



Problem Constraints
1 <= N <= 2000
0 <= A[i], B[i] <= 109



Input Format
The first argument given is the integer array A.
The second argument given is the integer array B.



Output Format
Return the number of unordered quadruplets that form a rectangle.



Example Input
Input 1:

 A = [1, 1, 2, 2]
 B = [1, 2, 1, 2]
Input 1:

 A = [1, 1, 2, 2, 3, 3]
 B = [1, 2, 1, 2, 1, 2]


Example Output
Output 1:

 1
Output 2:

 3


Example Explanation
Explanation 1:

 All four given points make a rectangle. So, the answer is 1.
Explanation 2:

 3 quadruplets which make a rectangle are: (1, 1), (2, 1), (2, 2), (1, 2)
                                           (1, 1), (3, 1), (3, 2), (1, 2)
                                           (2, 1), (3, 1), (3, 2), (2, 2) */


/*Using two points x1,y1 and x2,y2 --> consider them as any diagonal points, now to created the straight line parallel to x and y axis
x1,y2 and y1,x2 should be another 2 points to create rectangle. 
Now it could be any of the diagonals of rectangle, if a rectangle present and we keep checking for 2 points, 
we will get 2 count for each diagonals. so ans = count/2

    x1y1--------x2y1
    |             |
    x1y2--------x2y2
*/

public class Solution {
    public int solve(int[] A, int[] B) {
        HashSet<String> set = new HashSet<String>();
        int n=A.length;
        for(int i=0;i<n;i++)
        {
            String coord = A[i]+"@"+B[i];
            set.add(coord);
        } 

        int count = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(A[i]!=A[j] && B[i]!=B[j])
                {
                    String coord1 = A[i]+"@"+B[j];
                    String coord2 = A[j]+"@"+B[i];
                    if(set.contains(coord1) && set.contains(coord2))
                    count++;
                }
            }
        }
        return count/2;
    }
}
