/* Q1. Inorder Traversal

Problem Description
Given a binary tree, return the inorder traversal of its nodes' values.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return an integer array denoting the inorder traversal of the given binary tree.



Example Input
Input 1:

   1
    \
     2
    /
   3
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [1, 3, 2]
Output 2:

 [6, 1, 3, 2]


Example Explanation
Explanation 1:

 The Inorder Traversal of the given tree is [1, 3, 2].
Explanation 2:

 The Inorder Traversal of the given tree is [6, 1, 3, 2]. */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */

public class Solution {
    
    /*public int[] inorderTraversal(TreeNode A) {
        ArrayList<Integer> list = new ArrayList<>();
        
        inorder(A,list);
        return list.stream().mapToInt(Integer::intValue).toArray();
        
    }
    public void inorder(TreeNode A,ArrayList<Integer> list)
    {
        if(A==null)
            return;
        inorder(A.left,list);
        list.add(A.val);
        inorder(A.right,list);
    }*/

    // iterative method using stack and pair
    // 3 states to be maintained, state1:add left child, state2:print own val,add right child, state3: remove self
    class Pair{
        TreeNode node;
        int state;
        Pair(TreeNode nn,int st)
        {
            node=nn;
            state=st;
        }
    }
    public int[] inorderTraversal(TreeNode A) {
        ArrayList<Integer> ans = new ArrayList<>();
        if(A==null)
            return new int[]{};

        Stack<Pair> st = new Stack<Pair>();
        Pair root = new Pair(A,1);
        st.push(root);
        while(st.size()>0)
        {
            Pair curr=st.peek();
            if(curr.state==1)
            {
                curr.state++;
                if(curr.node.left!=null)
                    st.push(new Pair(curr.node.left,1));
            }
            else if(curr.state==2)
            {
                curr.state++;
                ans.add(curr.node.val);
                if(curr.node.right!=null)
                    st.push(new Pair(curr.node.right,1));
            }
            else if(curr.state==3)
            {
                st.pop();
            }
        }
        return ans.stream().mapToInt(Integer::intValue).toArray();
    }
}
