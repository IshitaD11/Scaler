/* Q2. Binary Tree From Inorder And Postorder

Problem Description
Given the inorder and postorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First argument is an integer array A denoting the inorder traversal of the tree.

Second argument is an integer array B denoting the postorder traversal of the tree.



Output Format
Return the root node of the binary tree.



Example Input
Input 1:

 A = [2, 1, 3]
 B = [2, 3, 1]
Input 2:

 A = [6, 1, 3, 2]
 B = [6, 3, 2, 1]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3


Example Explanation
Explanation 1:

 Create the binary tree and return the root node of the tree. */

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] A, int[] B) {

        TreeNode root = createTree(A,0,A.length-1,B,0,B.length-1);
        return root;
    }
    public TreeNode createTree(int[] inOrder,int inSt,int inEn,int[] postOrder,int poSt,int poEn)
    {
        // breaking condition
        if(inSt>inEn || poSt>poEn)
            return null;
        int rootVal =  postOrder[poEn];
        TreeNode root = new TreeNode(rootVal);
        // find the rootVal in InOrder array
        int rootIdxIn = 0;
        for(int i=inSt;i<=inEn;i++)
        {
            if(inOrder[i]==rootVal)
            {
                rootIdxIn=i;
                break;
            }    
        }
        int elementsAtLeft = rootIdxIn-inSt; //rootIdxIn-1 to inSt
        root.left = createTree(inOrder,inSt,rootIdxIn-1,postOrder,poSt,poSt+elementsAtLeft-1);
        root.right = createTree(inOrder,rootIdxIn+1,inEn,postOrder,poSt+elementsAtLeft,poEn-1);
        return root;
    }
}
