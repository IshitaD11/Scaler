/* Q2. Minimum Swaps

Problem Description

Given an array of integers A and an integer B, find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.

Note: It is possible to swap any two elements, not necessarily consecutive.



Problem Constraints

1 <= length of the array <= 100000
-109 <= A[i], B <= 109



Input Format

The first argument given is the integer array A.
The second argument given is the integer B.



Output Format

Return the minimum number of swaps.



Example Input

Input 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 B = 8
Input 2:

 A = [5, 17, 100, 11]
 B = 20


Example Output

Output 1:

 2
Output 2:

 1


Example Explanation

Explanation 1:

 A = [1, 12, 10, 3, 14, 10, 5]
 After swapping  12 and 3, A => [1, 3, 10, 12, 14, 10, 5].
 After swapping  the first occurence of 10 and 5, A => [1, 3, 5, 12, 14, 10, 10].
 Now, all elements less than or equal to 8 are together.
Explanation 2:

 A = [5, 17, 100, 11]
 After swapping 100 and 11, A => [5, 17, 11, 100].
 Now, all elements less than or equal to 20 are together. */
 
 /*To bring all elemets <=B together, need to create a subarray of fixed length. Length would be count of good element.
every subarray of size K, check how many good elements are already present. need to swap the bad elements with other good element, to bring all good elements together.
Brute force: For every subarray of size k, find out the no of bad elements. that is the no of swaps required for each subarray.

Optimised: carry forward the count of bad element in every subarray of fixed length. min of that will be the ans.
*/


public class Solution {
    public int solve(int[] A, int B) {

        int n=A.length;
        int good = 0;

        // count the no of good elements, that is the size of subarray
        for(int i=0;i<n;i++)
        {
            if(A[i]<=B)
                good++;
        }

        // if there is only 1 good element no swaps required
        // if all elements are good, no swaps required
        // if all are bad element, i.e. good element count 0. no swaps required
        if(good==1 || good==n || good==0)
            return 0;

        int bad=0;
        int swap=0;

        // subarray of length "good", slide window and count the no of bad elements
        // check for the first window 
        for(int i=0;i<good;i++)
        {
            if(A[i]>B)
                bad++;
        }
        swap=bad;
        int s=1; int e=good; //for next window
        while(e<n)
        {
            if(A[s-1]>B)
                bad--;
            if(A[e]>B)
                bad++;
            swap=Math.min(bad,swap);
            s++; e++;
        }
        return swap;
    }
}
