/* Q2. Compute nCr % p

Problem Description
Given three integers A, B, and C, where A represents n, B represents r, and C represents p and p is a prime number greater than equal to n, find and return the value of nCr % p where nCr % p = (n! / ((n-r)! * r!)) % p.

x! means factorial of x i.e. x! = 1 * 2 * 3... * x.

NOTE: For this problem, we are considering 1 as a prime.



Problem Constraints
1 <= A <= 106
1 <= B <= A
A <= C <= 109+7


Input Format
The first argument given is the integer A ( = n).
The second argument given is the integer B ( = r).
The third argument given is the integer C ( = p).



Output Format
Return the value of nCr % p.



Example Input
Input 1:

 A = 5
 B = 2
 C = 13
Input 2:

 A = 6
 B = 2
 C = 13


Example Output
Output 1:

 10
Output 2:

 2


Example Explanation
Explanation 1:

 nCr( n=5 and r=2) = 10.
 p=13. Therefore, nCr%p = 10. */
 
 
/*Inverse Modulo/Fermat Theorem: x^(-1)%p = x^(p-2)%p
Here P is prime number */

public class Solution {
    public int solve(int A, int B, int C) {

        if(B==1)
            return A%C;
        long rFact = factorial(B,C);
        long nrFact = factorial(A-B,C);
        long nFact = factorial(A,C);

        long rInvPowMod = powMod(rFact,(C-2),C);
        long nrInvPowMod = powMod(nrFact,(C-2),C);
        long ans = (((nFact*rInvPowMod)%C)*nrInvPowMod)%C;

        return (int)ans;
    }

    public long factorial(int A, int mod)
    {
        long factRes=1;
        for(long i=2;i<=A;i++)
        {
            factRes=(factRes*i)%mod;
        }
        return factRes;
    }

    public long powMod(long num,int pow,int mod)
    {
        if(pow==0)
            return 1;
        long next = powMod(num,(pow/2),mod);
        if(pow%2==0)
            return ((next*next)%mod);
        else
            return (((next*next)%mod)*num)%mod;
    }
}
