/* Q3. Sorted Permutation Rank

Problem Description
Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.



Example Input
Input 1:

A = "acb"
Input 2:

A = "a"


Example Output
Output 1:

2
Output 2:

1


Example Explanation
Explanation 1:

Given A = "acb".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1. */

public class Solution {
    public int findRank(String A) {
        // use fixed array to store all the characters in A
        int[] dict = new int[58];  //'A' to 'z'
        int n=A.length();
        long mod = 1000003;
        for(int i=0;i<A.length();i++)
        {
            dict[A.charAt(i)-'A']++;
        }

        long rank=0;
        // take each character, we need to check it's rank respect to the right side characters. for each char will make dict array as 0
        for(int i=0;i<A.length();i++)
        {
            char ch = A.charAt(i);
            dict[ch-'A']=0;

            // check how many characters are less than ch
            long smallerChars=0;
            for(int j=0;j<(ch-'A');j++)
            {
                if(dict[j]>0)
                    smallerChars=smallerChars+dict[j];
                // System.out.println("smallerChars"+smallerChars);
            }
            //rank = number of characters less than first character * (N-1)! + rank of permutation of the string with the first character removed
            // System.out.println("n-i-1"+(n-i-1));
            rank = (rank + (fact(n-i-1)*smallerChars)%mod)%mod;
        }
        return (int)((rank+1)%mod); //as rank starts from 1
    }
    public long fact(int n)
    {
        if(n==0)
            return 1;
        long f = ((long)n*fact(n-1))%1000003;
        return f;
    }
}
