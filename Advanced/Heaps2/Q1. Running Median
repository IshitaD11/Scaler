/* Q1. Running Median

Problem Description
Given an array of integers, A denoting a stream of integers. New arrays of integer B and C are formed.
Each time an integer is encountered in a stream, append it at the end of B and append the median of array B at the C.

Find and return the array C.

NOTE:

If the number of elements is N in B and N is odd, then consider the median as B[N/2] ( B must be in sorted order).
If the number of elements is N in B and N is even, then consider the median as B[N/2-1]. ( B must be in sorted order).


Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return an integer array C, C[i] denotes the median of the first i elements.



Example Input
Input 1:

 A = [1, 2, 5, 4, 3]
Input 2:

 A = [5, 17, 100, 11]


Example Output
Output 1:

 [1, 1, 2, 2, 3]
Output 2:

 [5, 5, 17, 11]


Example Explanation
Explanation 1:

 stream          median
 [1]             1
 [1, 2]          1
 [1, 2, 5]       2
 [1, 2, 5, 4]    2
 [1, 2, 5, 4, 3] 3
Explanation 2:

 stream          median
 [5]              5
 [5, 17]          5
 [5, 17, 100]     17
 [5, 17, 100, 11] 11  */

/*create two heaps. 1. max heap for the left elements
2. min heap for max element
balance these 2 heaps in each iteration. if(h1.size>h2.size) median = h1.peek
if(h1.size<h2.size) median = h2.peek
else    median = (h1.peek+h2.peek)/2
TC:O(nlogn)
*/
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        PriorityQueue<Integer> maxHeapLeft = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> minHeapRight = new PriorityQueue<>();
        ArrayList<Integer> ans = new ArrayList<Integer>();

        maxHeapLeft.add(A.get(0));
        ans.add(A.get(0));
        for(int i=1;i<A.size();i++)
        {
            if(maxHeapLeft.peek()<A.get(i))
                minHeapRight.add(A.get(i));
            else
                maxHeapLeft.add(A.get(i));

            if(Math.abs(minHeapRight.size()-maxHeapLeft.size())>1)
                balance(minHeapRight,maxHeapLeft);

            if(minHeapRight.size()>maxHeapLeft.size())
                ans.add(minHeapRight.peek());
            else if(minHeapRight.size()<maxHeapLeft.size())
                ans.add(maxHeapLeft.peek());
            else
                ans.add(maxHeapLeft.peek());            
        }
        return ans;

    }
    public void balance(PriorityQueue<Integer> minHeapRight,PriorityQueue<Integer> maxHeapLeft)
    {
        if(minHeapRight.size()-maxHeapLeft.size()>1)
        {
            int min= minHeapRight.poll();
            maxHeapLeft.add(min);
        }
        else
        {
            int max=maxHeapLeft.poll();
            minHeapRight.add(max);
        }
    }
}
