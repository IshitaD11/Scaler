/* Q2. Maximum XOR Subarray

Problem Description
Given an array, A of integers of size N. Find the subarray AL, AL+1, AL+2, ... AR with 1<=L<=R<=N, which has maximum XOR value.

NOTE: If there are multiple subarrays with the same maximum value, return the subarray with minimum length. If the length is the same, return the subarray with the minimum starting index.



Problem Constraints
1 <= N <= 100000
0 <= A[i] <= 109



Input Format
First and only argument is an integer array A.



Output Format
Return an integer array B of size 2. B[0] is the starting index(1-based) of the subarray and B[1] is the ending index(1-based) of the subarray.



Example Input
Input 1:

 A = [1, 4, 3]
Input 2:

 A = [8]


Example Output
Output 1:

 [2, 3]
Output 2:

 [1, 1]


Example Explanation
Explanation 1:

 There are 6 possible subarrays of A:
 subarray            XOR value
 [1]                     1
 [4]                     4
 [3]                     3
 [1, 4]                  5 (1^4)
 [4, 3]                  7 (4^3)
 [1, 4, 3]               6 (1^4^3)

 [4, 3] subarray has maximum XOR value. So, return [2, 3].
Explanation 2:

 There is only one element in the array. So, the maximum XOR value is equal to 8 and the only possible subarray is [1, 1].  */

//Create prefix xor array, add 0 to end
// pass the prefix xor array to find pair xor, each pair is subarrays

public class Solution {
    public class Trie
    {
        int val;
        int idx;
        Trie[] children;
        Trie(int v)
        {
            val=v;
            children=new Trie[2];
        }
    }

    public void createTrie(Trie root, int num, int msb,int index)
    {
        Trie curr=root;
        for(int i=msb-1;i>=0;i--)
        {
            int ithbit = ((num>>i)&1);
            if(curr.children[ithbit]==null)
            {
                curr.children[ithbit] = new Trie(ithbit);
            }
            curr=curr.children[ithbit];
        }
        curr.idx=index;
    }

    public int[] solve(int[] A) {
        int n=A.length;

        int[] pfXOR = new int[n+1];
        pfXOR[0]=0; //adding at start to calculate length correctly
        pfXOR[1]=A[0];
        int maxNum=pfXOR[1];

        for(int i=2;i<n+1;i++)
        {    
            pfXOR[i]=(pfXOR[i-1]^A[i-1]);
            maxNum=Math.max(pfXOR[i],maxNum);
        }

        // System.out.println(Arrays.toString(pfXOR));
        // get the bit cnt of maxNum
        int msb = 0;
        while(maxNum!=0)
        {
            maxNum=(maxNum>>1);
            msb++;
        }

        // create Trie
        Trie root = new Trie(-1);
        for(int i=0;i<=n;i++)
        {
            createTrie(root,pfXOR[i],msb,i);
        }

        // find max XOR
        int XOR=0;
        int maxXor=0;
        int len=Integer.MAX_VALUE;
        int[] ans=new int[2];

        for(int i=0;i<=n;i++)
        {
            XOR=0;
            Trie curr=root;
            // System.out.println("pfXOR[i]"+pfXOR[i]);
            for(int j=msb-1;j>=0;j--)
            {
                int jthbit = ((pfXOR[i]>>j)&1);
                // System.out.println("jthbit"+jthbit);
                if(jthbit==1) //set bit, look for unsetbit
                {
                    if(curr.children[0]!=null)
                    {
                        XOR = (XOR | (1<<j));
                        curr=curr.children[0];
                    }
                    else
                        curr=curr.children[1];
                }
                else //unset bit, look for setbit
                {
                    if(curr.children[1]!=null)
                    {
                        XOR = (XOR | (1<<j));
                        curr=curr.children[1];
                    }
                    else
                        curr=curr.children[0];
                }
            }
            // System.out.println("xor"+XOR);

            int en = curr.idx;
            int currLen = Math.abs(en-i);
            // System.out.println("en"+en);
            // System.out.println("currLen"+currLen);
            // System.out.println("maxXor"+maxXor);
            // System.out.println("len"+len);
            if(XOR>maxXor)
            {
                maxXor=XOR;
                ans[0]=Math.min(i,en)+1;
                ans[1]=Math.max(i,en);
                len=currLen;
            }    
            else if(maxXor==XOR && currLen<len)
            {
                len=currLen;
                ans[0]=Math.min(i,en)+1;
                ans[1]=Math.max(i,en);
            }
            // System.out.println(Arrays.toString(ans));
        }
        return ans;
    }
}
