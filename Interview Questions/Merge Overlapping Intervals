/* Q2. Merge Overlapping Intervals

Problem Description
Given a collection of intervals, merge all overlapping intervals.



Problem Constraints
1 <= Total number of intervals <= 100000.



Input Format
First argument is a list of intervals.



Output Format
Return the sorted list of intervals after merging all the overlapping intervals.



Example Input
Input 1:

[1,3],[2,6],[8,10],[15,18]


Example Output
Output 1:

[1,6],[8,10],[15,18]


Example Explanation
Explanation 1:

Merge intervals [1,3] and [2,6] -> [1,6].
so, the required answer after merging is [1,6],[8,10],[15,18].
No more overlapping intervals present. */

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        ArrayList<Interval> ans=new ArrayList<Interval>();

        // sort the intervals based on starting position
        Collections.sort(intervals,new Comparator<Interval>(){
            @Override
            public int compare(Interval i1,Interval i2)
            {
                return i1.start - i2.start;
            }
        });

        // check i and i+1 intervals, merge as required and store them in (i+1)th arraylist
        for(int i=0;i<intervals.size()-1;i++)
        {
            if(intervals.get(i).end < intervals.get(i+1).start)
            {
                ans.add(intervals.get(i));
            }
            else
            {
                intervals.get(i+1).start = Math.min(intervals.get(i+1).start,intervals.get(i).start);
                intervals.get(i+1).end = Math.max(intervals.get(i+1).end,intervals.get(i).end);
            }
        }
        ans.add(intervals.get(intervals.size()-1));
        return ans;
    }
}
