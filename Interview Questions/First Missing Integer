/* Q3. First Missing Integer

Problem Description
Given an unsorted integer array, A of size N. Find the first missing positive integer.

Note: Your algorithm should run in O(n) time and use constant space.



Problem Constraints
1 <= N <= 1000000

-109 <= A[i] <= 109



Input Format
First argument is an integer array A.



Output Format
Return an integer denoting the first missing positive integer.



Example Input
Input 1:

[1, 2, 0]
Input 2:

[3, 4, -1, 1]
Input 3:

[-8, -7, -6]


Example Output
Output 1:

3
Output 2:

2
Output 3:

1


Example Explanation
Explanation 1:

A = [1, 2, 0]
First positive integer missing from the array is 3. */

public class Solution {
    public int firstMissingPositive(ArrayList<Integer> A) {
        int n=A.size();
        int i=0;

        // first place the elements greater than 0 to it's corresponding index A[0]=1; A[1]=2 and so on...
        while(i<n)
        {
            int ele=A.get(i);
            if(ele>n || ele<1 || A.get(ele-1)==ele)
            {
                i++;
            }  
            else
            {
                int tmp=ele;
                A.set(i,A.get(ele-1));
                A.set(ele-1,tmp);
            }  
            // System.out.println("A"+A);
        }

        // after all elements are placed, iterate over the array to find which first element is not placed in it's correct position. return that value

        int val=1;

        for(int j=0;j<n;j++)
        {
            if(A.get(j)>val)
                return val;
            else if(A.get(j) == (j+1))
            {
                val++;
            }
        }
        return val;
    }
}
