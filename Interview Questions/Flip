/* Q2. Flip

https://www.scaler.com/academy/mentee-dashboard/class/81678/homework/problems/329?navref=cl_tt_nv

Problem Description
You are given a binary string A(i.e., with characters 0 and 1) consisting of characters A1, A2, ..., AN. In a single operation, you can choose two indices, L and R, such that 1 ≤ L ≤ R ≤ N and flip the characters AL, AL+1, ..., AR. By flipping, we mean changing character 0 to 1 and vice-versa.

Your aim is to perform ATMOST one operation such that in the final string number of 1s is maximized.

If you don't want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.

NOTE: Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.



Problem Constraints
1 <= size of string <= 100000



Input Format
First and only argument is a string A.



Output Format
Return an array of integers denoting the answer.



Example Input
Input 1:

A = "010"
Input 2:

A = "111"


Example Output
Output 1:

[1, 1]
Output 2:

[]


Example Explanation
Explanation 1:

A = "010"

Pair of [L, R] | Final string
_______________|_____________
[1 1]          | "110"
[1 2]          | "100"
[1 3]          | "101"
[2 2]          | "000"
[2 3]          | "001"

We see that two pairs [1, 1] and [1, 3] give same number of 1s in final string. So, we return [1, 1].
Explanation 2:

No operation can give us more than three 1s in final string. So, we return empty array []. */


/*Kedane's Algorithim: store the count of zeros, that will be the count of 1's after flip, 
when 1 found add -1 to cnt of zeros. Keep track of the maximum zeros count and store the start index and end index*/

public class Solution {
    public int[] flip(String A) {
        int cntZero=0;
        int maxCnt=0;
        int cntOne=0;
        int[] pair={};
        // count no of 1's and store in cntOne
        for(int i=0;i<A.length();i++)
        {
            if(A.charAt(i)=='1')
                cntOne++;
        }
        if(cntOne==A.length()) //if all elements are 1 return blank array
            return pair;
        
        pair=new int[2];
        

        int temp=1; //denotes starting index for 1 based indexes
        cntZero = cntOne; //we already have cntOne no of 1's, now keep counting the zeros, as after flip count of 0's will get added as 1
        maxCnt=cntOne; //we already have cntOne no of 1's, need to get max count more than that

        // iterate over the array and find the maximum 1's possible, when 0 found, that will be 1, when 1 found adjust it by -1, as that 1 is already considered in maxCnt
        for(int i=0;i<A.length();i++)
        {
            if(A.charAt(i)=='0') //when 0 found add to the count 
            {
                cntZero++;
            }    
            else //when 0 found substract from the count 
                cntZero--; 

            //when count is less that already found no of 1's, reset the count, discard the previous part of the array, new subarray to be started from this point
            // so initilize the starting point of subarray as the next position, +2 as it is 1 indexed
            if(cntZero<cntOne) 
            {
                cntZero=cntOne;
                temp=i+2;
            }

            // when we find a new max count, update the max count and previously found start point and current position as end point
            if(maxCnt<cntZero)
            {
                pair[0]=temp;
                pair[1]=i+1;
                maxCnt=cntZero;
            }

        }
        return pair;
    }
}
