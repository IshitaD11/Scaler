/* Q1. Matrix Median


Q1. Matrix Median
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
Given a matrix of integers A of size N x M in which each row is sorted.

Find and return the overall median of matrix A.

NOTE: No extra memory is allowed.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
1 <= N, M <= 10^5

1 <= N*M <= 10^6

1 <= A[i] <= 10^9

N*M is odd



Input Format
The first and only argument given is the integer matrix A.



Output Format
Return the overall median of matrix A.



Example Input
Input 1:

A = [   [1, 3, 5],
        [2, 6, 9],
        [3, 6, 9]   ] 
Input 2:

A = [   [5, 17, 100]    ]


Example Output
Output 1:

 5 
Output 2:

 17


Example Explanation
Explanation 1:

A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
Median is 5. So, we return 5. 
Explanation 2:

Median is 17. */


/*for n*m matrix we need to find the median. Given n*m is odd. We need to find (n*m/2)+1 th element when the elements are sorted
To find that, we will binary search in the search space [min to max] element of the array. 
For the mid element, check how many elements are less that mid element. to find the position of mid, if all elements were merged and sorted
to find how many elements are less than mid, we will binary search the element just greater than mid, 
index+1 would be the lesser element count
sum up the lesser elements in each row to get the total count of lesser elements for mid in the matrix.
If count > (n*m/2)+1 --> go to left to find smaller element
If count < (n*m/2)+1 --> go to right to find larger element
*/


public class Solution {
    public int findMedian(int[][] A) {
        
        int m=A[0].length;
        int n=A.length;
        int targetPos = ((n*m)/2)+1;

        int low=A[0][0]; //min of all 1st col elements, as each row is sorted, min element is at the start
        int high=A[0][m-1]; //max of all last col elements
        for(int i=0;i<n;i++)
        {
            low=Math.min(low,A[i][0]);
            high=Math.max(high,A[i][m-1]);
        }

        int ans=0;

        while(low<=high)
        {
            int mid=low+(high-low)/2;

            int positionOfMid = positionOfMidInSortedArr(A,mid,n,m);

            if(positionOfMid>=targetPos)  // test case [[1,1,3,3,3,3,3]] --> larger count is also a valid ans until we find exact targetPos
            {
                ans= mid;
                high=mid-1;
            }    
            
            else
                low=mid+1;
        }
        return ans;
    }

    public int positionOfMidInSortedArr(int[][] mat,int ele,int row, int col)
    {
        int posCnt = 0;
        int upperBoundIdx=0;

        // find upper bound of ele in each row
        for(int i=0;i<row;i++)
        {
            int low=0;
            int high=col-1;
            upperBoundIdx=col;
            while(low<=high)
            {
                int mid = low +(high-low)/2;
                if(mat[i][mid]>ele)
                {
                    upperBoundIdx=mid;
                    high=mid-1;
                }
                else
                    low=mid+1;
            }
            posCnt = posCnt+upperBoundIdx;
        }
        return posCnt;
    }
}
