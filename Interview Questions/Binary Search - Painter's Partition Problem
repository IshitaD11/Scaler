/* Q1. Painter's Partition Problem

Problem Description
Given 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.
You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.

Calculate and return the minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of the board.
NOTE:
1. 2 painters cannot share a board to paint. That is to say, a board cannot be painted partially by one painter, and partially by another.
2. A painter will only paint contiguous boards. This means a configuration where painter 1 paints boards 1 and 3 but not 2 is invalid.

Return the ans % 10000003.



Problem Constraints
1 <= A <= 1000
1 <= B <= 106
1 <= N <= 105
1 <= C[i] <= 106



Input Format
The first argument given is the integer A.
The second argument given is the integer B.
The third argument given is the integer array C.



Output Format
Return minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of board % 10000003.



Example Input
Input 1:

 A = 2
 B = 5
 C = [1, 10]
Input 2:

 A = 10
 B = 1
 C = [1, 8, 11, 3]


Example Output
Output 1:

 50
Output 2:

 11


Example Explanation
Explanation 1:

 Possibility 1:- One painter paints both blocks, time taken = 55 units.
 Possibility 2:- Painter 1 paints block 1, painter 2 paints block 2, time take = max(5, 50) = 50
 There are no other distinct ways to paint boards.
 ans = 50 % 10000003
Explanation 2:

 Each block is painted by a painter so, Painter 1 paints block 1, painter 2 paints block 2, painter 3 paints block 3 
 and painter 4 paints block 4, time taken = max(1, 8, 11, 3) = 11
 ans = 11 % 10000003 */

/*Binary Search on possible minimum time to paint C.length boards by A painters. Each painter takes B time for 1 unit of board.
Search Space --> minumum time = 1 or (max board size*B). Maximum time = (sum of all boards size)*B
Target --> minimum time possible to paint all boards by A painters
divide the search space by 
---> If to complete C boards in target time, we need more than A painters, then need to increase time. mid=start+1
---> If to complete C boards in target time, we need less than A painters, then reduce the time. mid=end-1
---> If to complete C boards in target time, we need exactly A painters, then it is possible answer, 
    but to find min time, reduce the time. mid=end-1

*/
public class Solution {
    public int paint(int A, int B, int[] C) {
        // get the total board size to get the max time
        long totalSize=0;
        int len=C.length;
        for(int i=0;i<len;i++)
        {
            totalSize+=C[i];
        }
        long start = 1;
        long end = totalSize;
        long ans=0;
        while(start<=end)
        {
            long mid = start+(end-start)/2;
            int painters = painterBoardCheck(C,mid);
            if(painters<=A)  //if all painters are not used, less than A is also a valid answer
            {
                ans=mid;
                end=mid-1;
            }
        
            else
                start=mid+1;
        }
        return (int)((ans*B)%10000003);
    }
    public int painterBoardCheck(int[] arr,long totalTime)
    {
        int painterCnt=1;
        long remainingTime=totalTime;

        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>totalTime)
                return Integer.MAX_VALUE;  //not possible answer so max value as it will go to right side
            if(arr[i]<=remainingTime)
            {
                remainingTime=remainingTime-arr[i];
            }
            else
            {
                painterCnt++;
                remainingTime=totalTime-arr[i];
            }
        }
        return painterCnt;
    }
}
